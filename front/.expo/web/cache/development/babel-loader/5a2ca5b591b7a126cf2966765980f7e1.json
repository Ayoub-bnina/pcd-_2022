{"ast":null,"code":"var validateFormat = function validateFormat() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}\n\nexport default invariant;","map":{"version":3,"sources":["C:/LearnEZ/node_modules/@react-navigation/core/lib/module/utils/invariant.js"],"names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","args","error","argIndex","replace","name","framesToPop"],"mappings":"AAUA,IAAIA,cAAc,GAAG,SAASA,cAAT,GAA0B,CAAE,CAAjD;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,cAAc,GAAG,SAASA,cAAT,CAAwBI,MAAxB,EAAgC;AAC/C,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACF,GAJD;AAKD;;AAED,SAASC,SAAT,CAAmBC,SAAnB,EAA8BJ,MAA9B,EAA+C;AAAA,oCAANK,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC7CT,EAAAA,cAAc,CAACI,MAAD,CAAd;;AAEA,MAAI,CAACI,SAAL,EAAgB;AACd,QAAIE,KAAJ;;AAEA,QAAIN,MAAM,KAAKC,SAAf,EAA0B;AACxBK,MAAAA,KAAK,GAAG,IAAIJ,KAAJ,CAAU,+HAAV,CAAR;AACD,KAFD,MAEO;AACL,UAAIK,QAAQ,GAAG,CAAf;AACAD,MAAAA,KAAK,GAAG,IAAIJ,KAAJ,CAAUF,MAAM,CAACQ,OAAP,CAAe,KAAf,EAAsB;AAAA,eAAMH,IAAI,CAACE,QAAQ,EAAT,CAAV;AAAA,OAAtB,CAAV,CAAR;AACAD,MAAAA,KAAK,CAACG,IAAN,GAAa,qBAAb;AACD;;AAEDH,IAAAA,KAAK,CAACI,WAAN,GAAoB,CAApB;AAEA,UAAMJ,KAAN;AACD;AACF;;AAED,eAAeH,SAAf","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\nlet validateFormat = function validateFormat() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, ...args) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n\nexport default invariant;\n//# sourceMappingURL=invariant.js.map"]},"metadata":{},"sourceType":"module"}