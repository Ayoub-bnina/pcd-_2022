{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport Icon from \"./Icon\";\nimport CrossFadeIcon from \"./CrossFadeIcon\";\nimport { withTheme } from \"../core/theming\";\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var buttonSize = size * 1.5;\n  return React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(View, null, React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/components/IconButton.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","color","TouchableRipple","Icon","CrossFadeIcon","withTheme","IconButton","icon","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","buttonSize","createElement","borderless","centered","styles","container","width","height","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","View","StyleSheet","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}) => {\n  const iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);\n//# sourceMappingURL=IconButton.js.map"]},"metadata":{},"sourceType":"module"}