{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\nimport { PitchCorrectionQuality } from \"./AV.types\";\nexport var _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = 500;\nexport var _DEFAULT_INITIAL_PLAYBACK_STATUS = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false\n};\nexport function getNativeSourceFromSource(source) {\n  var uri = null;\n  var overridingExtension = null;\n  var headers;\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension: overridingExtension,\n      headers: headers\n    };\n  }\n\n  var asset = _getAssetFromPlaybackSource(source);\n\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (source != null && typeof source !== 'number' && 'uri' in source && typeof source.uri === 'string') {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (source != null && typeof source !== 'number' && 'overrideFileExtensionAndroid' in source && typeof source.overrideFileExtensionAndroid === 'string') {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (source != null && typeof source !== 'number' && 'headers' in source && typeof source.headers === 'object') {\n    headers = source.headers;\n  }\n\n  return {\n    uri: uri,\n    overridingExtension: overridingExtension,\n    headers: headers\n  };\n}\n\nfunction _getAssetFromPlaybackSource(source) {\n  if (source == null) {\n    return null;\n  }\n\n  var asset = null;\n\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n\n  return asset;\n}\n\nexport function assertStatusValuesInBounds(status) {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n}\nexport function getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst) {\n  var fullInitialStatus, asset, nativeSource;\n  return _regeneratorRuntime.async(function getNativeSourceAndFullInitialStatusForLoadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fullInitialStatus = initialStatus == null ? _DEFAULT_INITIAL_PLAYBACK_STATUS : _objectSpread(_objectSpread({}, _DEFAULT_INITIAL_PLAYBACK_STATUS), initialStatus);\n          assertStatusValuesInBounds(fullInitialStatus);\n\n          if (!(typeof source === 'string' && Platform.OS === 'web')) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            nativeSource: {\n              uri: source,\n              overridingExtension: null\n            },\n            fullInitialStatus: fullInitialStatus\n          });\n\n        case 4:\n          asset = _getAssetFromPlaybackSource(source);\n\n          if (!(downloadFirst && asset)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(asset.downloadAsync());\n\n        case 8:\n          nativeSource = getNativeSourceFromSource(source);\n\n          if (!(nativeSource === null)) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error(\"Cannot load an AV asset from a null playback source\");\n\n        case 11:\n          return _context.abrupt(\"return\", {\n            nativeSource: nativeSource,\n            fullInitialStatus: fullInitialStatus\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUnloadedStatus() {\n  var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return _objectSpread({\n    isLoaded: false\n  }, error ? {\n    error: error\n  } : null);\n}\nexport var PlaybackMixin = {\n  playAsync: function playAsync() {\n    return _regeneratorRuntime.async(function playAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", this.setStatusAsync({\n              shouldPlay: true\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  playFromPositionAsync: function playFromPositionAsync(positionMillis) {\n    var tolerances,\n        _args3 = arguments;\n    return _regeneratorRuntime.async(function playFromPositionAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            tolerances = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            return _context3.abrupt(\"return\", this.setStatusAsync({\n              positionMillis: positionMillis,\n              shouldPlay: true,\n              seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n              seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  pauseAsync: function pauseAsync() {\n    return _regeneratorRuntime.async(function pauseAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", this.setStatusAsync({\n              shouldPlay: false\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  stopAsync: function stopAsync() {\n    return _regeneratorRuntime.async(function stopAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", this.setStatusAsync({\n              positionMillis: 0,\n              shouldPlay: false\n            }));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  setPositionAsync: function setPositionAsync(positionMillis) {\n    var tolerances,\n        _args6 = arguments;\n    return _regeneratorRuntime.async(function setPositionAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            tolerances = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n            return _context6.abrupt(\"return\", this.setStatusAsync({\n              positionMillis: positionMillis,\n              seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n              seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n            }));\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  setRateAsync: function setRateAsync(rate) {\n    var shouldCorrectPitch,\n        pitchCorrectionQuality,\n        _args7 = arguments;\n    return _regeneratorRuntime.async(function setRateAsync$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            shouldCorrectPitch = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : false;\n            pitchCorrectionQuality = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : PitchCorrectionQuality.Low;\n            return _context7.abrupt(\"return\", this.setStatusAsync({\n              rate: rate,\n              shouldCorrectPitch: shouldCorrectPitch,\n              pitchCorrectionQuality: pitchCorrectionQuality\n            }));\n\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  setVolumeAsync: function setVolumeAsync(volume) {\n    return _regeneratorRuntime.async(function setVolumeAsync$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", this.setStatusAsync({\n              volume: volume\n            }));\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  setIsMutedAsync: function setIsMutedAsync(isMuted) {\n    return _regeneratorRuntime.async(function setIsMutedAsync$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            return _context9.abrupt(\"return\", this.setStatusAsync({\n              isMuted: isMuted\n            }));\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  setIsLoopingAsync: function setIsLoopingAsync(isLooping) {\n    return _regeneratorRuntime.async(function setIsLoopingAsync$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            return _context10.abrupt(\"return\", this.setStatusAsync({\n              isLooping: isLooping\n            }));\n\n          case 1:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  },\n  setProgressUpdateIntervalAsync: function setProgressUpdateIntervalAsync(progressUpdateIntervalMillis) {\n    return _regeneratorRuntime.async(function setProgressUpdateIntervalAsync$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            return _context11.abrupt(\"return\", this.setStatusAsync({\n              progressUpdateIntervalMillis: progressUpdateIntervalMillis\n            }));\n\n          case 1:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  }\n};\nexport * from \"./AV.types\";","map":{"version":3,"mappings":"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","names":["Asset","Platform","PitchCorrectionQuality","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","_DEFAULT_INITIAL_PLAYBACK_STATUS","positionMillis","progressUpdateIntervalMillis","shouldPlay","rate","shouldCorrectPitch","volume","isMuted","isLooping","getNativeSourceFromSource","source","uri","overridingExtension","headers","OS","asset","_getAssetFromPlaybackSource","localUri","overrideFileExtensionAndroid","fromModule","assertStatusValuesInBounds","status","RangeError","getNativeSourceAndFullInitialStatusForLoadAsync","initialStatus","downloadFirst","fullInitialStatus","nativeSource","downloadAsync","Error","getUnloadedStatus","error","isLoaded","PlaybackMixin","playAsync","setStatusAsync","playFromPositionAsync","tolerances","seekMillisToleranceAfter","toleranceMillisAfter","seekMillisToleranceBefore","toleranceMillisBefore","pauseAsync","stopAsync","setPositionAsync","setRateAsync","pitchCorrectionQuality","Low","setVolumeAsync","setIsMutedAsync","setIsLoopingAsync","setProgressUpdateIntervalAsync"],"sourceRoot":"","sources":["../src/AV.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\n\nimport {\n  AVPlaybackSource,\n  AVPlaybackNativeSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  PitchCorrectionQuality,\n} from './AV.types';\n\n// TODO add:\n//  disableFocusOnAndroid\n//  audio routes (at least did become noisy on android)\n//  pan\n//  pitch\n//  API to explicitly request audio focus / session\n//  API to select stream type on Android\n//  subtitles API\n\nexport const _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: number = 500;\nexport const _DEFAULT_INITIAL_PLAYBACK_STATUS: AVPlaybackStatusToSet = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false,\n};\n\nexport function getNativeSourceFromSource(\n  source?: AVPlaybackSource | null\n): AVPlaybackNativeSource | null {\n  let uri: string | null = null;\n  let overridingExtension: string | null = null;\n  let headers: { [fieldName: string]: string } | undefined;\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension,\n      headers,\n    };\n  }\n\n  const asset: Asset | null = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (\n    source != null &&\n    typeof source !== 'number' &&\n    'uri' in source &&\n    typeof source.uri === 'string'\n  ) {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'overrideFileExtensionAndroid' in source &&\n    typeof source.overrideFileExtensionAndroid === 'string'\n  ) {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'headers' in source &&\n    typeof source.headers === 'object'\n  ) {\n    headers = source.headers;\n  }\n  return { uri, overridingExtension, headers };\n}\n\nfunction _getAssetFromPlaybackSource(source?: AVPlaybackSource | null): Asset | null {\n  if (source == null) {\n    return null;\n  }\n\n  let asset: Asset | null = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n  return asset;\n}\n\nexport function assertStatusValuesInBounds(status: AVPlaybackStatusToSet): void {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n}\n\nexport async function getNativeSourceAndFullInitialStatusForLoadAsync(\n  source: AVPlaybackSource | null,\n  initialStatus: AVPlaybackStatusToSet | null,\n  downloadFirst: boolean\n): Promise<{\n  nativeSource: AVPlaybackNativeSource;\n  fullInitialStatus: AVPlaybackStatusToSet;\n}> {\n  // Get the full initial status\n  const fullInitialStatus: AVPlaybackStatusToSet =\n    initialStatus == null\n      ? _DEFAULT_INITIAL_PLAYBACK_STATUS\n      : {\n          ..._DEFAULT_INITIAL_PLAYBACK_STATUS,\n          ...initialStatus,\n        };\n  assertStatusValuesInBounds(fullInitialStatus);\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      nativeSource: {\n        uri: source,\n        overridingExtension: null,\n      },\n      fullInitialStatus,\n    };\n  }\n\n  // Download first if necessary.\n  const asset = _getAssetFromPlaybackSource(source);\n  if (downloadFirst && asset) {\n    // TODO we can download remote uri too once @nikki93 has integrated this into Asset\n    await asset.downloadAsync();\n  }\n\n  // Get the native source\n  const nativeSource: AVPlaybackNativeSource | null = getNativeSourceFromSource(source);\n\n  if (nativeSource === null) {\n    throw new Error(`Cannot load an AV asset from a null playback source`);\n  }\n\n  return { nativeSource, fullInitialStatus };\n}\n\nexport function getUnloadedStatus(error: string | null = null): AVPlaybackStatus {\n  return {\n    isLoaded: false,\n    ...(error ? { error } : null),\n  };\n}\n\nexport interface AV {\n  setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n  getStatusAsync(): Promise<AVPlaybackStatus>;\n}\n\nexport interface Playback extends AV {\n  playAsync(): Promise<AVPlaybackStatus>;\n  loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet,\n    downloadAsync: boolean\n  ): Promise<AVPlaybackStatus>;\n  unloadAsync(): Promise<AVPlaybackStatus>;\n  playFromPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<AVPlaybackStatus>;\n  pauseAsync(): Promise<AVPlaybackStatus>;\n  stopAsync(): Promise<AVPlaybackStatus>;\n  replayAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n  setPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<AVPlaybackStatus>;\n  setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ): Promise<AVPlaybackStatus>;\n  setVolumeAsync(volume: number): Promise<AVPlaybackStatus>;\n  setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus>;\n  setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync(progressUpdateIntervalMillis: number): Promise<AVPlaybackStatus>;\n}\n\n/**\n * A mixin that defines common playback methods for A/V classes so they implement the `Playback`\n * interface\n */\nexport const PlaybackMixin = {\n  async playAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: true });\n  },\n\n  async playFromPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      shouldPlay: true,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async pauseAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: false });\n  },\n\n  async stopAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ positionMillis: 0, shouldPlay: false });\n  },\n\n  async setPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean = false,\n    pitchCorrectionQuality: PitchCorrectionQuality = PitchCorrectionQuality.Low\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      rate,\n      shouldCorrectPitch,\n      pitchCorrectionQuality,\n    });\n  },\n\n  async setVolumeAsync(volume: number): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ volume });\n  },\n\n  async setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isMuted });\n  },\n\n  async setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isLooping });\n  },\n\n  async setProgressUpdateIntervalAsync(\n    progressUpdateIntervalMillis: number\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ progressUpdateIntervalMillis });\n  },\n};\n\nexport * from './AV.types';\n"]},"metadata":{},"sourceType":"module"}