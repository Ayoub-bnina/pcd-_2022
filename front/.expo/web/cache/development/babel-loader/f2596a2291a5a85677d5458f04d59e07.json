{"ast":null,"code":"import color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DarkTheme from \"./DarkTheme\";\n\nvar isAnimatedValue = function isAnimatedValue(it) {\n  return it instanceof Animated.Value;\n};\n\nexport default function overlay(elevation) {\n  var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DarkTheme.colors.surface;\n\n  if (isAnimatedValue(elevation)) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (elevation) {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  }\n\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor) {\n  var elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var overlayTransparency;\n\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n\n  return color(surfaceColor).mix(color('white'), overlayTransparency * 0.01).hex();\n}\n\nvar elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/styles/overlay.js"],"names":["color","DarkTheme","isAnimatedValue","it","Animated","Value","overlay","elevation","surfaceColor","colors","surface","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,SAAP;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,EAAE;AAAA,SAAIA,EAAE,YAAYC,QAAQ,CAACC,KAA3B;AAAA,CAA1B;;AAEA,eAAe,SAASC,OAAT,CAAiBC,SAAjB,EAAqE;AAAA,MAAzCC,YAAyC,uEAA1BP,SAAS,CAACQ,MAAV,CAAiBC,OAAS;;AAClF,MAAIR,eAAe,CAACK,SAAD,CAAnB,EAAgC;AAC9B,QAAMI,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB;AAEA,WAAOJ,SAAS,CAACK,WAAV,CAAsB;AAC3BD,MAAAA,UAAU,EAAVA,UAD2B;AAE3BE,MAAAA,WAAW,EAAEF,UAAU,CAACG,GAAX,CAAe,UAAAP,SAAS,EAAI;AACvC,eAAOQ,cAAc,CAACP,YAAD,EAAeD,SAAf,CAArB;AACD,OAFY;AAFc,KAAtB,CAAP;AAMD;;AAGD,SAAOQ,cAAc,CAACP,YAAD,EAAeD,SAAf,CAArB;AACD;;AAED,SAASQ,cAAT,CAAwBP,YAAxB,EAAqD;AAAA,MAAfD,SAAe,uEAAH,CAAG;AACnD,MAAIS,mBAAJ;;AAEA,MAAIT,SAAS,IAAI,CAAb,IAAkBA,SAAS,IAAI,EAAnC,EAAuC;AACrCS,IAAAA,mBAAmB,GAAGC,4BAA4B,CAACV,SAAD,CAAlD;AACD,GAFD,MAEO,IAAIA,SAAS,GAAG,EAAhB,EAAoB;AACzBS,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAC,EAAD,CAAlD;AACD,GAFM,MAEA;AACLD,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAC,CAAD,CAAlD;AACD;;AAED,SAAOjB,KAAK,CAACQ,YAAD,CAAL,CAAoBU,GAApB,CAAwBlB,KAAK,CAAC,OAAD,CAA7B,EAAwCgB,mBAAmB,GAAG,IAA9D,EAAoEG,GAApE,EAAP;AACD;;AAED,IAAMF,4BAA4B,GAAG;AACnC,KAAG,CADgC;AAEnC,KAAG,CAFgC;AAGnC,KAAG,CAHgC;AAInC,KAAG,CAJgC;AAKnC,KAAG,EALgC;AAMnC,KAAG,EANgC;AAOnC,KAAG,IAPgC;AAQnC,KAAG,EARgC;AASnC,KAAG,IATgC;AAUnC,MAAI,EAV+B;AAWnC,MAAI,IAX+B;AAYnC,MAAI,EAZ+B;AAanC,MAAI,KAb+B;AAcnC,MAAI,IAd+B;AAenC,MAAI,KAf+B;AAgBnC,MAAI,EAhB+B;AAiBnC,MAAI,KAjB+B;AAkBnC,MAAI,KAlB+B;AAmBnC,MAAI,KAnB+B;AAoBnC,MAAI,KApB+B;AAqBnC,MAAI,IArB+B;AAsBnC,MAAI,KAtB+B;AAuBnC,MAAI,KAvB+B;AAwBnC,MAAI;AAxB+B,CAArC","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = it => it instanceof Animated.Value;\n\nexport default function overlay(elevation, surfaceColor = DarkTheme.colors.surface) {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24]; // @ts-expect-error: TS doesn't seem to refine the type correctly\n\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map(elevation => {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  } // @ts-expect-error: TS doesn't seem to refine the type correctly\n\n\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor, elevation = 1) {\n  let overlayTransparency;\n\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n\n  return color(surfaceColor).mix(color('white'), overlayTransparency * 0.01).hex();\n}\n\nconst elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};\n//# sourceMappingURL=overlay.js.map"]},"metadata":{},"sourceType":"module"}