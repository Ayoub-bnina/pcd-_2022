{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nimport useTheme from \"../../../utils/useTheme\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n      cardOverlay = _ref.cardOverlay,\n      cardOverlayEnabled = _ref.cardOverlayEnabled,\n      cardShadowEnabled = _ref.cardShadowEnabled,\n      cardStyle = _ref.cardStyle,\n      cardStyleInterpolator = _ref.cardStyleInterpolator,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      gestureDirection = _ref.gestureDirection,\n      gestureEnabled = _ref.gestureEnabled,\n      gestureResponseDistance = _ref.gestureResponseDistance,\n      gestureVelocityImpact = _ref.gestureVelocityImpact,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      mode = _ref.mode,\n      headerMode = _ref.headerMode,\n      headerShown = _ref.headerShown,\n      headerStyleInterpolator = _ref.headerStyleInterpolator,\n      hasAbsoluteHeader = _ref.hasAbsoluteHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      index = _ref.index,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onPageChangeCancel = _ref.onPageChangeCancel,\n      onPageChangeConfirm = _ref.onPageChangeConfirm,\n      onPageChangeStart = _ref.onPageChangeStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene,\n      transitionSpec = _ref.transitionSpec;\n  React.useEffect(function () {\n    onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n  }, [active, onPageChangeConfirm]);\n\n  var handleOpen = function handleOpen() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n\n  var handleTransitionStart = function handleTransitionStart(_ref2) {\n    var closing = _ref2.closing;\n\n    if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var isParentHeaderShown = React.useContext(HeaderShownContext);\n  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  var previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: onPageChangeStart,\n    onGestureCanceled: onPageChangeCancel,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","useTheme","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","useEffect","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","useState","pointerEvents","setPointerEvents","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","isParentHeaderShown","useContext","isCurrentHeaderShown","previousScene","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","StyleSheet","absoluteFill","View","styles","container","Provider","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport useTheme from '../../../utils/useTheme';\nimport type {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}