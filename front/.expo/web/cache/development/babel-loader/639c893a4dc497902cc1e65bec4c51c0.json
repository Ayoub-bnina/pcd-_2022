{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport color from 'color';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { withTheme } from \"../../../core/theming\";\nimport { AdornmentSide } from \"./enums\";\nvar AFFIX_OFFSET = 12;\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\n\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n      side = _ref.side,\n      textStyle = _ref.textStyle,\n      topPosition = _ref.topPosition,\n      onLayout = _ref.onLayout,\n      visible = _ref.visible,\n      paddingHorizontal = _ref.paddingHorizontal;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal\n    }\n  }, affix);\n};\n\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n      labelStyle = _ref2.textStyle,\n      theme = _ref2.theme;\n\n  var _React$useContext = React.useContext(AffixContext),\n      textStyle = _React$useContext.textStyle,\n      onLayout = _React$useContext.onLayout,\n      topPosition = _React$useContext.topPosition,\n      side = _React$useContext.side,\n      visible = _React$useContext.visible,\n      paddingHorizontal = _React$useContext.paddingHorizontal;\n\n  var textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, React.createElement(Text, {\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix);\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAffix.js"],"names":["React","color","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","createElement","Provider","value","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","Animated","View","styles","container","opacity","interpolate","inputRange","outputRange","Text","displayName","StyleSheet","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport { Text, StyleSheet, Animated } from 'react-native';\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\nconst AFFIX_OFFSET = 12;\nconst AffixContext = /*#__PURE__*/React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\n\nconst AffixAdornment = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal\n}) => {\n  return /*#__PURE__*/React.createElement(AffixContext.Provider, {\n    value: {\n      side,\n      textStyle,\n      topPosition,\n      onLayout,\n      visible,\n      paddingHorizontal\n    }\n  }, affix);\n};\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\n\nconst TextInputAffix = ({\n  text,\n  textStyle: labelStyle,\n  theme\n}) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  const offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  const style = {\n    top: topPosition,\n    [side]: offset\n  };\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix); // @component-docs ignore-next-line\n\nexport { TextInputAffix, AffixAdornment };\n//# sourceMappingURL=TextInputAffix.js.map"]},"metadata":{},"sourceType":"module"}