{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"../Modal\";\nimport DialogContent from \"./DialogContent\";\nimport DialogActions from \"./DialogActions\";\nimport DialogTitle from \"./DialogTitle\";\nimport DialogScrollArea from \"./DialogScrollArea\";\nimport { withTheme } from \"../../core/theming\";\nimport overlay from \"../../styles/overlay\";\nvar DIALOG_ELEVATION = 24;\n\nvar Dialog = function Dialog(_ref) {\n  var children = _ref.children,\n      _ref$dismissable = _ref.dismissable,\n      dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,\n      onDismiss = _ref.onDismiss,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      style = _ref.style,\n      theme = _ref.theme;\n  return React.createElement(Modal, {\n    dismissable: dismissable,\n    onDismiss: onDismiss,\n    visible: visible,\n    contentContainerStyle: [{\n      borderRadius: theme.roundness,\n      backgroundColor: theme.dark && theme.mode === 'adaptive' ? overlay(DIALOG_ELEVATION, theme.colors.surface) : theme.colors.surface\n    }, styles.container, style]\n  }, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (i === 0 && React.isValidElement(child) && child.type === DialogContent) {\n      return React.cloneElement(child, {\n        style: [{\n          paddingTop: 24\n        }, child.props.style]\n      });\n    }\n\n    return child;\n  }));\n};\n\nDialog.Content = DialogContent;\nDialog.Actions = DialogActions;\nDialog.Title = DialogTitle;\nDialog.ScrollArea = DialogScrollArea;\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/components/Dialog/Dialog.js"],"names":["React","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","overlay","DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","createElement","contentContainerStyle","borderRadius","roundness","backgroundColor","dark","mode","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","props","Content","Actions","Title","ScrollArea","StyleSheet","create","marginVertical","Platform","OS","marginHorizontal","elevation","justifyContent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AAEA,OAAOC,WAAP;AACA,OAAOC,gBAAP;AACA,SAASC,SAAT;AACA,OAAOC,OAAP;AACA,IAAMC,gBAAgB,GAAG,EAAzB;;AA+CA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MACbC,QADa,QACbA,QADa;AAAA,8BAEbC,WAFa;AAAA,MAEbA,WAFa,iCAEC,IAFD;AAAA,MAGbC,SAHa,QAGbA,SAHa;AAAA,0BAIbC,OAJa;AAAA,MAIbA,OAJa,6BAIH,KAJG;AAAA,MAKbC,KALa,QAKbA,KALa;AAAA,MAMbC,KANa,QAMbA,KANa;AAAA,SAOIf,KAAK,CAACgB,aAAN,CAAoBf,KAApB,EAA2B;AAC5CU,IAAAA,WAAW,EAAEA,WAD+B;AAE5CC,IAAAA,SAAS,EAAEA,SAFiC;AAG5CC,IAAAA,OAAO,EAAEA,OAHmC;AAI5CI,IAAAA,qBAAqB,EAAE,CAAC;AACtBC,MAAAA,YAAY,EAAEH,KAAK,CAACI,SADE;AAEtBC,MAAAA,eAAe,EAAEL,KAAK,CAACM,IAAN,IAAcN,KAAK,CAACO,IAAN,KAAe,UAA7B,GAA0Cf,OAAO,CAACC,gBAAD,EAAmBO,KAAK,CAACQ,MAAN,CAAaC,OAAhC,CAAjD,GAA4FT,KAAK,CAACQ,MAAN,CAAaC;AAFpG,KAAD,EAGpBC,MAAM,CAACC,SAHa,EAGFZ,KAHE;AAJqB,GAA3B,EAQhBd,KAAK,CAAC2B,QAAN,CAAeC,OAAf,CAAuBlB,QAAvB,EAAiCmB,MAAjC,CAAwC,UAAAC,KAAK;AAAA,WAAIA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAtC;AAAA,GAA7C,EAA8FC,GAA9F,CAAkG,UAACD,KAAD,EAAQE,CAAR,EAAc;AACjH,QAAIA,CAAC,KAAK,CAAN,IAAwBhC,KAAK,CAACiC,cAAN,CAAqBH,KAArB,CAAxB,IAAuDA,KAAK,CAACI,IAAN,KAAehC,aAA1E,EAAyF;AAEvF,aAAoBF,KAAK,CAACmC,YAAN,CAAmBL,KAAnB,EAA0B;AAC5ChB,QAAAA,KAAK,EAAE,CAAC;AACNsB,UAAAA,UAAU,EAAE;AADN,SAAD,EAEJN,KAAK,CAACO,KAAN,CAAYvB,KAFR;AADqC,OAA1B,CAApB;AAKD;;AAED,WAAOgB,KAAP;AACD,GAXE,CARgB,CAPJ;AAAA,CAAf;;AA6BArB,MAAM,CAAC6B,OAAP,GAAiBpC,aAAjB;AAEAO,MAAM,CAAC8B,OAAP,GAAiBpC,aAAjB;AAEAM,MAAM,CAAC+B,KAAP,GAAepC,WAAf;AAEAK,MAAM,CAACgC,UAAP,GAAoBpC,gBAApB;AACA,IAAMoB,MAAM,GAAGiB,UAAU,CAACC,MAAX,CAAkB;AAC/BjB,EAAAA,SAAS,EAAE;AAQTkB,IAAAA,cAAc,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,EAA5B,GAAiC,CARxC;AASTC,IAAAA,gBAAgB,EAAE,EATT;AAUTC,IAAAA,SAAS,EAAExC,gBAVF;AAWTyC,IAAAA,cAAc,EAAE;AAXP;AADoB,CAAlB,CAAf;AAeA,eAAe3C,SAAS,CAACG,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport DialogTitle from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\nconst DIALOG_ELEVATION = 24;\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme\n}) => /*#__PURE__*/React.createElement(Modal, {\n  dismissable: dismissable,\n  onDismiss: onDismiss,\n  visible: visible,\n  contentContainerStyle: [{\n    borderRadius: theme.roundness,\n    backgroundColor: theme.dark && theme.mode === 'adaptive' ? overlay(DIALOG_ELEVATION, theme.colors.surface) : theme.colors.surface\n  }, styles.container, style]\n}, React.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').map((child, i) => {\n  if (i === 0 && /*#__PURE__*/React.isValidElement(child) && child.type === DialogContent) {\n    // Dialog content is the first item, so we add a top padding\n    return /*#__PURE__*/React.cloneElement(child, {\n      style: [{\n        paddingTop: 24\n      }, child.props.style]\n    });\n  }\n\n  return child;\n})); // @component ./DialogContent.tsx\n\n\nDialog.Content = DialogContent; // @component ./DialogActions.tsx\n\nDialog.Actions = DialogActions; // @component ./DialogTitle.tsx\n\nDialog.Title = DialogTitle; // @component ./DialogScrollArea.tsx\n\nDialog.ScrollArea = DialogScrollArea;\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);\n//# sourceMappingURL=Dialog.js.map"]},"metadata":{},"sourceType":"module"}