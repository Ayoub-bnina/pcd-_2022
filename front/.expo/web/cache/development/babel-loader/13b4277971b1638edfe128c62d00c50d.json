{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default (function (Navigator, navigatorConfig) {\n  var _class, _temp;\n\n  return _temp = _class = function (_React$Component) {\n    _inherits(KeyboardAwareNavigator, _React$Component);\n\n    var _super = _createSuper(KeyboardAwareNavigator);\n\n    function KeyboardAwareNavigator() {\n      var _this;\n\n      _classCallCheck(this, KeyboardAwareNavigator);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _defineProperty(_assertThisInitialized(_this), \"_previouslyFocusedTextInput\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleGestureBegin\", function () {\n        _this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(_this._previouslyFocusedTextInput);\n        }\n\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleGestureCanceled\", function () {\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(_this._previouslyFocusedTextInput);\n        }\n\n        _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleGestureEnd\", function () {\n        _this._previouslyFocusedTextInput = null;\n        _this.props.onGestureFinish && _this.props.onGestureFinish();\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleTransitionStart\", function (transitionProps, prevTransitionProps) {\n        if (transitionProps.index !== prevTransitionProps.index) {\n          var currentField = TextInput.State.currentlyFocusedField();\n\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n\n        var onTransitionStart = _this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      });\n\n      return _this;\n    }\n\n    _createClass(KeyboardAwareNavigator, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Navigator, _extends({}, this.props, {\n          onGestureBegin: this._handleGestureBegin,\n          onGestureCanceled: this._handleGestureCanceled,\n          onGestureEnd: this._handleGestureEnd,\n          onTransitionStart: this._handleTransitionStart\n        }));\n      }\n    }]);\n\n    return KeyboardAwareNavigator;\n  }(React.Component), _defineProperty(_class, \"router\", Navigator.router), _defineProperty(_class, \"navigationOptions\", Navigator.navigationOptions), _temp;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,gBAAe,UAACC,SAAD,EAAYC,eAAZ;AAAA;;AAAA;AAAA;;AAAA;;AACwC;AAAA;;AAAA;;AAAA;AAAAC;AAAA;;AAAA;;AAAAC,oFAGrB,IAHqB;;AAAAA,4EAK7B,YAAM;AAC1B,cAAKC,2BAAL,GAAmCC,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,EAAnC;;AACA,YAAI,MAAKD,2BAAT,EAAsC;AACpCC,mBAAS,CAACC,KAAVD,CAAgBG,aAAhBH,CAA8B,MAAKD,2BAAnCC;AACD;;AACD,cAAKI,KAAL,CAAWC,cAAX,IAA6B,MAAKD,KAAL,CAAWC,cAAX,EAA7B;AAViD;;AAAAP,+EAa1B,YAAM;AAC7B,YAAI,MAAKC,2BAAT,EAAsC;AACpCC,mBAAS,CAACC,KAAVD,CAAgBM,cAAhBN,CAA+B,MAAKD,2BAApCC;AACD;;AACD,cAAKI,KAAL,CAAWG,iBAAX,IAAgC,MAAKH,KAAL,CAAWG,iBAAX,EAAhC;AAjBiD;;AAAAT,0EAoB/B,YAAM;AACxB,cAAKC,2BAAL,GAAmC,IAAnC;AACA,cAAKK,KAAL,CAAWI,eAAX,IAA8B,MAAKJ,KAAL,CAAWI,eAAX,EAA9B;AAtBiD;;AAAAV,+EAyB1B,UAACW,eAAD,EAAkBC,mBAAlB,EAA0C;AAIjE,YAAID,eAAe,CAACE,KAAhBF,KAA0BC,mBAAmB,CAACC,KAAlD,EAAyD;AACvD,cAAMC,YAAY,GAAGZ,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,EAArB;;AACA,cAAIY,YAAJ,EAAkB;AAChBZ,qBAAS,CAACC,KAAVD,CAAgBG,aAAhBH,CAA8BY,YAA9BZ;AACD;AACF;;AAED,YAAMa,iBAAiB,GACrB,MAAKT,KAAL,CAAWS,iBAAX,IAAgCjB,eAAe,CAACiB,iBADlD;AAEAA,yBAAiB,IACfA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CADnBG;AAtCiD;;AAAA;AAAA;;AADxC;AAAA;AAAA,aA2CXC,kBAAS;AACP,eACEpB,oBAACC,SAAD,eACM,KAAKS,KADX;AAEEC,wBAAc,EAAE,KAAKU,mBAFvB;AAGER,2BAAiB,EAAE,KAAKS,sBAH1B;AAIEC,sBAAY,EAAE,KAAKC,iBAJrB;AAKEL,2BAAiB,EAAE,KAAKM;AAL1B,WADF;AASD;AArDU;;AAAA;AAAA,IACwBzB,KAAK,CAAC0B,SAD9B,qCAEKzB,SAAS,CAAC0B,MAFf,gDAGgB1B,SAAS,CAAC2B,iBAH1B;AAAf","names":["React","Navigator","navigatorConfig","args","_defineProperty","_previouslyFocusedTextInput","TextInput","State","currentlyFocusedField","blurTextInput","props","onGestureBegin","focusTextInput","onGestureCanceled","onGestureFinish","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","render","_handleGestureBegin","_handleGestureCanceled","onGestureEnd","_handleGestureEnd","_handleTransitionStart","Component","router","navigationOptions"],"sources":["createKeyboardAwareNavigator.js"],"sourcesContent":["import React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default (Navigator, navigatorConfig) =>\n  class KeyboardAwareNavigator extends React.Component {\n    static router = Navigator.router;\n    static navigationOptions = Navigator.navigationOptions;\n    _previouslyFocusedTextInput = null;\n\n    _handleGestureBegin = () => {\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    };\n\n    _handleGestureCanceled = () => {\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    };\n\n    _handleGestureEnd = () => {\n      this._previouslyFocusedTextInput = null;\n      this.props.onGestureFinish && this.props.onGestureFinish();\n    };\n\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n      // TODO: We should not even have received the transition start event\n      // in the case where the index did not change, I believe. We\n      // should revisit this after 2.0 release.\n      if (transitionProps.index !== prevTransitionProps.index) {\n        const currentField = TextInput.State.currentlyFocusedField();\n        if (currentField) {\n          TextInput.State.blurTextInput(currentField);\n        }\n      }\n\n      const onTransitionStart =\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n      onTransitionStart &&\n        onTransitionStart(transitionProps, prevTransitionProps);\n    };\n\n    render() {\n      return (\n        <Navigator\n          {...this.props}\n          onGestureBegin={this._handleGestureBegin}\n          onGestureCanceled={this._handleGestureCanceled}\n          onGestureEnd={this._handleGestureEnd}\n          onTransitionStart={this._handleTransitionStart}\n        />\n      );\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}