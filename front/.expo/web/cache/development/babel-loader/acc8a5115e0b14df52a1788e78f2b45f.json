{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport color from 'color';\nimport IconButton from \"../IconButton\";\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { black, white } from \"../../styles/colors\";\n\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n      size = _ref.size,\n      theme = _ref.theme,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      value = _ref.value,\n      status = _ref.status,\n      _onPress = _ref.onPress,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var borderRadius = theme.roundness;\n  return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n    var backgroundColor;\n    var checked = context && context.value === value || status === 'checked';\n\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    return React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\n\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton);\nvar ToggleButtonWithTheme = withTheme(ToggleButton);\nexport { ToggleButtonWithTheme as ToggleButton };","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButton.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","withTheme","color","IconButton","ToggleButtonGroupContext","black","white","ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","createElement","Consumer","context","backgroundColor","checked","dark","borderless","e","onValueChange","accessibilityState","selected","styles","content","borderColor","alpha","rgb","string","StyleSheet","create","width","height","margin","ToggleButtonWithTheme"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}) => {\n  const borderRadius = theme.roundness;\n  return /*#__PURE__*/React.createElement(ToggleButtonGroupContext.Consumer, null, context => {\n    let backgroundColor;\n    const checked = context && context.value === value || status === 'checked';\n\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    return /*#__PURE__*/React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: e => {\n        if (onPress) {\n          onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor,\n        borderRadius,\n        borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton); // @component-docs ignore-next-line\n\nconst ToggleButtonWithTheme = withTheme(ToggleButton); // @component-docs ignore-next-line\n\nexport { ToggleButtonWithTheme as ToggleButton };\n//# sourceMappingURL=ToggleButton.js.map"]},"metadata":{},"sourceType":"module"}