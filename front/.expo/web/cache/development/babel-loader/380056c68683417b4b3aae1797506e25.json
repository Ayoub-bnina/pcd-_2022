{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport { ResizeMode } from \"./Video.types\";\nexport { ResizeMode };\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\n\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\n\nvar Video = function (_React$Component) {\n  _inherits(Video, _React$Component);\n\n  var _super = _createSuper(Video);\n\n  function Video(props) {\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    _this = _super.call(this, props);\n    _this._nativeRef = React.createRef();\n    _this._onPlaybackStatusUpdate = null;\n\n    _this._handleNewStatus = function (status) {\n      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        _this.setState({\n          showPoster: false\n        });\n      }\n\n      if (_this.props.onPlaybackStatusUpdate) {\n        _this.props.onPlaybackStatusUpdate(status);\n      }\n\n      if (_this._onPlaybackStatusUpdate) {\n        _this._onPlaybackStatusUpdate(status);\n      }\n    };\n\n    _this._performOperationAndHandleStatusAsync = function _callee(operation) {\n      var video, handle, status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              video = _this._nativeRef.current;\n\n              if (video) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");\n\n            case 3:\n              handle = findNodeHandle(_this._nativeRef.current);\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(operation(handle));\n\n            case 6:\n              status = _context.sent;\n\n              _this._handleNewStatus(status);\n\n              return _context.abrupt(\"return\", status);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._setFullscreen = function _callee2(value) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExpoVideoViewManager.setFullscreen(tag, value);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.presentFullscreenPlayer = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", _this._setFullscreen(true));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.presentIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");\n      return _this.presentFullscreenPlayer();\n    };\n\n    _this.presentFullscreenPlayerAsync = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(_this.presentFullscreenPlayer());\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.dismissFullscreenPlayer = function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", _this._setFullscreen(false));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.dismissIOSFullscreenPlayer = function () {\n      console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");\n\n      _this.dismissFullscreenPlayer();\n    };\n\n    _this.getStatusAsync = function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.getStatusForVideo(tag);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.loadAsync = function _callee7(source) {\n      var initialStatus,\n          downloadFirst,\n          _await$getNativeSourc,\n          nativeSource,\n          fullInitialStatus,\n          _args7 = arguments;\n\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n              downloadFirst = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : true;\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n\n            case 4:\n              _await$getNativeSourc = _context7.sent;\n              nativeSource = _await$getNativeSourc.nativeSource;\n              fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n              return _context7.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);\n              }));\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.unloadAsync = function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.unloadForVideo(tag);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.setStatusAsync = function _callee9(status) {\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              assertStatusValuesInBounds(status);\n              return _context9.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.setStatusForVideo(tag, status);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.replayAsync = function _callee10() {\n      var status,\n          _args10 = arguments;\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              status = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n\n              if (!(status.positionMillis && status.positionMillis !== 0)) {\n                _context10.next = 3;\n                break;\n              }\n\n              throw new Error('Requested position after replay has to be 0.');\n\n            case 3:\n              return _context10.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n                return ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n                  positionMillis: 0,\n                  shouldPlay: true\n                }));\n              }));\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._nativeOnPlaybackStatusUpdate = function (event) {\n      _this._handleNewStatus(event.nativeEvent);\n    };\n\n    _this._nativeOnLoadStart = function () {\n      if (_this.props.onLoadStart) {\n        _this.props.onLoadStart();\n      }\n    };\n\n    _this._nativeOnLoad = function (event) {\n      if (_this.props.onLoad) {\n        _this.props.onLoad(event.nativeEvent);\n      }\n\n      _this._handleNewStatus(event.nativeEvent);\n    };\n\n    _this._nativeOnError = function (event) {\n      var error = event.nativeEvent.error;\n\n      if (_this.props.onError) {\n        _this.props.onError(error);\n      }\n\n      _this._handleNewStatus(getUnloadedStatus(error));\n    };\n\n    _this._nativeOnReadyForDisplay = function (event) {\n      if (_this.props.onReadyForDisplay) {\n        _this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n\n    _this._nativeOnFullscreenUpdate = function (event) {\n      if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {\n        console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");\n      } else if (_this.props.onIOSFullscreenUpdate) {\n        console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");\n      }\n\n      if (_this.props.onIOSFullscreenUpdate) {\n        _this.props.onIOSFullscreenUpdate(event.nativeEvent);\n      }\n\n      if (_this.props.onFullscreenUpdate) {\n        _this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n\n    _this._renderPoster = function () {\n      return _this.props.usePoster && _this.state.showPoster ? React.createElement(Image, {\n        style: [_STYLES.poster, _this.props.posterStyle],\n        source: _this.props.posterSource\n      }) : null;\n    };\n\n    _this.state = {\n      showPoster: !!props.usePoster\n    };\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var nativeVideo = this._nativeRef.current;\n      if (!nativeVideo) throw new Error(\"native video reference is not defined.\");\n      nativeVideo.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var source = getNativeSourceFromSource(this.props.source) || undefined;\n      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n\n      if (this.props.resizeMode) {\n        var resizeMode = this.props.resizeMode;\n\n        if (resizeMode === ResizeMode.STRETCH) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n        } else if (resizeMode === ResizeMode.CONTAIN) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n        } else if (resizeMode === ResizeMode.COVER) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n        }\n      }\n\n      var status = _objectSpread({}, this.props.status);\n\n      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n        if (prop in _this2.props) {\n          status[prop] = _this2.props[prop];\n        }\n      });\n\n      var nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat(_toConsumableArray(Object.keys(status))))), {}, {\n        style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n        source: source,\n        resizeMode: nativeResizeMode,\n        status: status,\n        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n        onLoadStart: this._nativeOnLoadStart,\n        onLoad: this._nativeOnLoad,\n        onError: this._nativeOnError,\n        onReadyForDisplay: this._nativeOnReadyForDisplay,\n        onFullscreenUpdate: this._nativeOnFullscreenUpdate\n      });\n\n      return React.createElement(View, {\n        style: nativeProps.style,\n        pointerEvents: \"box-none\"\n      }, React.createElement(ExponentVideo, _objectSpread(_objectSpread({\n        ref: this._nativeRef\n      }, nativeProps), {}, {\n        style: _STYLES.video\n      })), this._renderPoster());\n    }\n  }]);\n\n  return Video;\n}(React.Component);\n\nVideo.RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\nVideo.RESIZE_MODE_COVER = ResizeMode.COVER;\nVideo.RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nexport { Video as default };\n\nfunction omit(props, propNames) {\n  var copied = _objectSpread({}, props);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(propNames), _step; !(_step = _iterator()).done;) {\n    var propName = _step.value;\n    delete copied[propName];\n  }\n\n  return copied;\n}\n\n_extends(Video.prototype, PlaybackMixin);","map":{"version":3,"mappings":"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","names":["React","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","_STYLES","StyleSheet","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","props","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","operation","current","Error","handle","findNodeHandle","_setFullscreen","value","tag","setFullscreen","presentFullscreenPlayer","presentIOSFullscreenPlayer","console","warn","presentFullscreenPlayerAsync","dismissFullscreenPlayer","dismissIOSFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","source","initialStatus","downloadFirst","nativeSource","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","setStatusAsync","setStatusForVideo","replayAsync","replayVideo","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onIOSFullscreenUpdate","onFullscreenUpdate","_renderPoster","usePoster","Image","style","posterStyle","posterSource","nativeProps","nativeVideo","setNativeProps","undefined","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","Object","keys","flatten","onStatusUpdate","View","pointerEvents","ref","Component","RESIZE_MODE_CONTAIN","RESIZE_MODE_COVER","RESIZE_MODE_STRETCH","propNames","copied","propName","prototype"],"sourceRoot":"","sources":["../src/Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nexport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoNaturalSize,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackNativeSource,\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = async () => {\n    return await this.presentFullscreenPlayer();\n  };\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"]},"metadata":{},"sourceType":"module"}