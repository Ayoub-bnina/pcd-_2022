{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from \"../constants\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && React.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref5;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref5 = {}, _defineProperty(_ref5, marginKey, isAffix ? 0 : offset), _defineProperty(_ref5, paddingKey, isAffix ? offset : inputOffset), _ref5;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref6) {\n  var adornmentConfig = _ref6.adornmentConfig,\n      left = _ref6.left,\n      right = _ref6.right,\n      onAffixChange = _ref6.onAffixChange,\n      textStyle = _ref6.textStyle,\n      visible = _ref6.visible,\n      topPosition = _ref6.topPosition,\n      isTextInputFocused = _ref6.isTextInputFocused,\n      forceFocus = _ref6.forceFocus,\n      paddingHorizontal = _ref6.paddingHorizontal;\n\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref7) {\n      var type = _ref7.type,\n          side = _ref7.side;\n      var inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAdornment.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","createElement","Fragment","inputAdornmentComponent","commonProps","testID","icon","affix","onLayout"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nexport function getAdornmentConfig({\n  left,\n  right\n}) {\n  let adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(({\n      side,\n      adornment\n    }) => {\n      if (adornment && /*#__PURE__*/React.isValidElement(adornment)) {\n        let type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side,\n          type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode\n}) {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(({\n      type,\n      side\n    }) => {\n      const isLeftSide = side === AdornmentSide.Left;\n      const inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      const paddingKey = `padding${captalize(side)}`;\n      const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      const padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      const offset = affixWidth + padding;\n      const isAffix = type === AdornmentType.Affix;\n      const marginKey = `margin${captalize(side)}`;\n      return {\n        [marginKey]: isAffix ? 0 : offset,\n        [paddingKey]: isAffix ? offset : inputOffset\n      };\n    });\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles, currentStyle) => {\n      return { ...mergedStyles,\n        ...currentStyle\n      };\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = text => text.charAt(0).toUpperCase() + text.slice(1);\n\nconst TextInputAdornment = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal\n}) => {\n  if (adornmentConfig.length) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, adornmentConfig.map(({\n      type,\n      side\n    }) => {\n      let inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      const commonProps = {\n        key: side,\n        side: side,\n        testID: `${side}-${type}-adornment`,\n        isTextInputFocused,\n        paddingHorizontal\n      };\n\n      if (type === AdornmentType.Icon) {\n        return /*#__PURE__*/React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return /*#__PURE__*/React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n//# sourceMappingURL=TextInputAdornment.js.map"]},"metadata":{},"sourceType":"module"}