{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as SwitchActions from \"./SwitchActions\";\nimport * as StackActions from \"./StackActions\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport { createPathParser } from \"./pathUtils\";\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\".concat(initialRouteName, \"'.\") + \"Should be one of \".concat(order.map(function (n) {\n      return \"\\\"\".concat(n, \"\\\"\");\n    }).join(', ')));\n  }\n\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    childRouters[routeName] = null;\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread({}, routeConfig.params, {}, params);\n    } else {\n      return params;\n    }\n  }\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, config),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n\n    if (childRouter) {\n      var childAction = NavigationActions.init();\n      return _objectSpread({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName: routeName,\n        params: params\n      });\n    }\n\n    return {\n      key: routeName,\n      routeName: routeName,\n      params: params\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (backBehavior !== 'history' || prevState && nextState && nextState.index === prevState.index) {\n        return nextState;\n      }\n\n      var nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        var keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(function (k) {\n          return k !== keyToAdd;\n        });\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        nextRouteKeyHistory.pop();\n      }\n\n      return _objectSpread({}, nextState, {\n        routeKeyHistory: nextRouteKeyHistory\n      });\n    }\n\n    var nextState = possibleNextState;\n\n    if (prevState && possibleNextState && prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = _objectSpread({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    }\n\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    var initialState = {\n      routes: routes,\n      index: initialRouteIndex\n    };\n\n    if (backBehavior === 'history') {\n      var initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n\n    return initialState;\n  }\n\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _objectSpread({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        var params = action.params;\n\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _objectSpread({}, route, {\n              params: _objectSpread({}, route.params, {}, params, {}, route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n\n      if (action.type === SwitchActions.JUMP_TO && (action.key == null || action.key === state.key)) {\n        var _params = action.params;\n        var index = state.routes.findIndex(function (route) {\n          return route.routeName === action.routeName;\n        });\n\n        if (index === -1) {\n          throw new Error(\"There is no route named '\".concat(action.routeName, \"' in the navigator with the key '\").concat(action.key, \"'.\\n\") + \"Must be one of: \".concat(state.routes.map(function (route) {\n            return \"'\".concat(route.routeName, \"'\");\n          }).join(',')));\n        }\n\n        return getNextState(action, prevState, _objectSpread({}, state, {\n          routes: _params ? state.routes.map(function (route, i) {\n            return i === index ? _objectSpread({}, route, {\n              params: _objectSpread({}, route.params, {}, _params)\n            }) : route;\n          }) : state.routes,\n          index: index\n        }));\n      }\n\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n\n        if (!activeChildState && inputState) {\n          return null;\n        }\n\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var routes = _toConsumableArray(state.routes);\n\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            routes: routes\n          }));\n        }\n      }\n\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        } else if (isBackEligible && backBehavior === 'history' && state.routeKeyHistory.length > 1) {\n          var routeKey = state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      var didNavigate = false;\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = childState;\n\n          if (action.action && childRouter) {\n            var childStateUpdate = childRouter.getStateForAction(action.action, childState);\n\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = _objectSpread({}, newChildState, {\n              params: _objectSpread({}, newChildState.params || {}, {}, action.params)\n            });\n          }\n\n          if (newChildState !== childState) {\n            var _routes = _toConsumableArray(state.routes);\n\n            _routes[activeChildIndex] = newChildState;\n\n            var nextState = _objectSpread({}, state, {\n              routes: _routes,\n              index: activeChildIndex\n            });\n\n            return getNextState(action, prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var _params2 = _objectSpread({}, lastRoute.params, {}, action.params);\n\n          var _routes2 = _toConsumableArray(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread({}, lastRoute, {\n            params: _params2\n          });\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            routes: _routes2\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, _objectSpread({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _objectSpread({}, state);\n      }\n\n      var isActionBackOrPop = action.type === NavigationActions.BACK || action.type === StackActions.POP || action.type === StackActions.POP_TO_TOP;\n      var sendActionToInactiveChildren = !isActionBackOrPop || action.type === NavigationActions.BACK && action.key != null;\n\n      if (sendActionToInactiveChildren) {\n        var _index = state.index;\n        var _routes3 = state.routes;\n        order.find(function (childId, i) {\n          var childRouter = childRouters[childId];\n\n          if (i === _index) {\n            return false;\n          }\n\n          var childState = _routes3[i];\n\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n\n          if (!childState) {\n            _index = i;\n            return true;\n          }\n\n          if (childState !== _routes3[i]) {\n            _routes3 = _toConsumableArray(_routes3);\n            _routes3[i] = childState;\n            _index = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (action.preserveFocus) {\n          _index = state.index;\n        }\n\n        if (_index !== state.index || _routes3 !== state.routes) {\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            index: _index,\n            routes: _routes3\n          }));\n        }\n      }\n\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \".concat(state.index, \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\"));\n      var childRouter = childRouters[routeName];\n\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.defaultNavigationOptions)\n  };\n});","map":{"version":3,"mappings":"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","names":["invariant","getScreenForRouteName","createConfigGetter","NavigationActions","SwitchActions","StackActions","validateRouteConfigMap","createPathParser","defaultActionCreators","routeConfigs","config","order","Object","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","hasOwnProperty","initialRouteIndex","indexOf","Error","map","n","join","childRouters","forEach","routeName","screen","router","getParamsForRoute","params","routeConfig","getPathAndParamsForRoute","getActionForPathAndParams","resetChildRoute","initialParams","undefined","childRouter","childAction","init","getStateForAction","key","getNextState","action","prevState","possibleNextState","updateNextStateHistory","nextState","index","nextRouteKeyHistory","routeKeyHistory","type","NAVIGATE","keyToAdd","routes","filter","k","push","BACK","pop","prevRouteName","nextRoutes","getInitialState","initialState","initialKey","getActionCreators","route","stateKey","inputState","state","activeChildIndex","INIT","JUMP_TO","findIndex","i","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","max","length","routeKey","didNavigate","find","childId","childState","newChildState","childStateUpdate","SET_PARAMS","lastRoute","isActionBackOrPop","POP","POP_TO_TOP","sendActionToInactiveChildren","preserveFocus","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["SwitchRouter.js"],"sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map((n) => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach((routeName) => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (\n        backBehavior !== 'history' ||\n        (prevState && nextState && nextState.index === prevState.index)\n      ) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter((k) => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      possibleNextState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n    };\n\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map((route) => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          (route) => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${action.routeName}' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map((route) => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      const isActionBackOrPop =\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP ||\n        action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren =\n        !isActionBackOrPop ||\n        (action.type === NavigationActions.BACK && action.key != null);\n\n      // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        });\n\n        // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes,\n          });\n        }\n      }\n\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}