{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n      status = _ref.status,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      labelStyle = _ref.labelStyle,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme\n  });\n\n  var isLeading = position === 'leading';\n  var checkbox;\n\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: label,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked'\n    },\n    onPress: onPress,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem);\nvar CheckboxItemWithTheme = withTheme(CheckboxItem);\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/components/Checkbox/CheckboxItem.js"],"names":["React","Checkbox","CheckboxAndroid","CheckboxIOS","Text","TouchableRipple","withTheme","CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","props","checkboxProps","isLeading","checkbox","createElement","accessibilityLabel","accessibilityRole","accessibilityState","checked","View","styles","container","pointerEvents","importantForAccessibility","color","colors","text","textAlign","displayName","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  ...props\n}) => {\n  const checkboxProps = { ...props,\n    status,\n    theme\n  };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = /*#__PURE__*/React.createElement(Checkbox, checkboxProps);\n  }\n\n  return /*#__PURE__*/React.createElement(TouchableRipple, {\n    accessibilityLabel: label,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked'\n    },\n    onPress: onPress,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, /*#__PURE__*/React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem); // @component-docs ignore-next-line\n\nconst CheckboxItemWithTheme = withTheme(CheckboxItem); // @component-docs ignore-next-line\n\nexport { CheckboxItemWithTheme as CheckboxItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});\n//# sourceMappingURL=CheckboxItem.js.map"]},"metadata":{},"sourceType":"module"}