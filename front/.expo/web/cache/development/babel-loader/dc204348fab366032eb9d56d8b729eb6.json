{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Color from 'color';\nimport CardSheet from \"./CardSheet\";\nimport { PanGestureHandler, GestureState } from \"../GestureHandler\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"isClosing\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"inverted\", new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection)));\n\n    _defineProperty(_assertThisInitialized(_this), \"layout\", {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Animated.Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingGestureCallback\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"animate\", function (_ref) {\n      var closing = _ref.closing,\n          velocity = _ref.velocity;\n      var _this$props2 = _this.props,\n          gesture = _this$props2.gesture,\n          transitionSpec = _this$props2.transitionSpec,\n          onOpen = _this$props2.onOpen,\n          onClose = _this$props2.onClose,\n          onTransitionStart = _this$props2.onTransitionStart;\n\n      var toValue = _this.getAnimateToValue(_objectSpread({}, _this.props, {\n        closing: closing\n      }));\n\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n      _this.setPointerEventsEnabled(!closing);\n\n      _this.handleStartInteraction();\n\n      clearTimeout(_this.pendingGestureCallback);\n      onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n        closing: closing\n      });\n      animation(gesture, _objectSpread({}, spec.config, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.handleEndInteraction();\n\n        clearTimeout(_this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAnimateToValue\", function (_ref3) {\n      var closing = _ref3.closing,\n          layout = _ref3.layout,\n          gestureDirection = _ref3.gestureDirection;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPointerEventsEnabled\", function (enabled) {\n      var _this$contentRef$curr;\n\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props3 = _this.props,\n          layout = _this$props3.layout,\n          onClose = _this$props3.onClose,\n          onGestureBegin = _this$props3.onGestureBegin,\n          onGestureCanceled = _this$props3.onGestureCanceled,\n          onGestureEnd = _this$props3.onGestureEnd,\n          gestureDirection = _this$props3.gestureDirection,\n          gestureVelocityImpact = _this$props3.gestureVelocityImpact;\n\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          _this.isSwiping.setValue(TRUE);\n\n          _this.handleStartInteraction();\n\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            _this.handleEndInteraction();\n\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            var distance;\n            var translation;\n\n            var _velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(onClose, 32);\n            }\n\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInterpolatedStyle\", memoize(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return styleInterpolator({\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      });\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getCardAnimationContext\", memoize(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", React.createRef());\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          gestureDirection = _this$props4.gestureDirection,\n          closing = _this$props4.closing;\n      var width = layout.width,\n          height = layout.height;\n\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n\n      if (this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props5 = this.props,\n          layout = _this$props5.layout,\n          gestureDirection = _this$props5.gestureDirection,\n          gestureResponseDistance = _this$props5.gestureResponseDistance;\n      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          }\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          }\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            }\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          styleInterpolator = _this$props.styleInterpolator,\n          index = _this$props.index,\n          current = _this$props.current,\n          gesture = _this$props.gesture,\n          next = _this$props.next,\n          layout = _this$props.layout,\n          insets = _this$props.insets,\n          overlay = _this$props.overlay,\n          overlayEnabled = _this$props.overlayEnabled,\n          shadowEnabled = _this$props.shadowEnabled,\n          gestureEnabled = _this$props.gestureEnabled,\n          gestureDirection = _this$props.gestureDirection,\n          pageOverflowEnabled = _this$props.pageOverflowEnabled,\n          children = _this$props.children,\n          customContainerStyle = _this$props.containerStyle,\n          contentStyle = _this$props.contentStyle,\n          rest = _objectWithoutProperties(_this$props, [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\"]);\n\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var containerStyle = interpolatedStyle.containerStyle,\n          cardStyle = interpolatedStyle.cardStyle,\n          overlayStyle = interpolatedStyle.overlayStyle,\n          shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n          backgroundColor = _StyleSheet$flatten.backgroundColor;\n\n      var isTransparent = backgroundColor ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: animationContext\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(CardSheet, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport { Card as default };\n\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Color","CardSheet","PanGestureHandler","GestureState","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","Card","args","_defineProperty","Animated","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","getAnimateToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","config","isInteraction","start","finished","handleEndInteraction","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","undefined","InteractionManager","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","BEGAN","isSwiping","setValue","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","customContainerStyle","containerStyle","contentStyle","rest","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","StyleSheet","flatten","backgroundColor","isTransparent","alpha","Provider","value","View","style","opacity","collapsable","absoluteFill","styles","container","onGestureEvent","onHandlerStateChange","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","ref","Component","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: any;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransitionStart?.({ closing });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(\n            onClose,\n            32\n          ) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}