{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    var safeAreaInsets = _objectSpread({}, insets, {}, options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n          height = _ref3.height;\n\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread({}, headerHeights, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread({}, defaultTransitionPreset, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n          _ref6$top = _ref6.top,\n          top = _ref6$top === void 0 ? insets.top : _ref6$top,\n          _ref6$right = _ref6.right,\n          right = _ref6$right === void 0 ? insets.right : _ref6$right,\n          _ref6$bottom = _ref6.bottom,\n          bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n          _ref6$left = _ref6.left,\n          left = _ref6$left === void 0 ? insets.left : _ref6$left;\n\n      var isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n      return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n        var isFloatHeaderAbsolute = headerMode === 'float' ? _this2.state.scenes.slice(-2).some(function (scene) {\n          var descriptor = scene.descriptor;\n          var options = descriptor ? descriptor.options : {};\n          var headerTransparent = options.headerTransparent,\n              _options$headerShown = options.headerShown,\n              headerShown = _options$headerShown === void 0 ? isParentHeaderShown === false : _options$headerShown;\n\n          if (headerTransparent || headerShown === false) {\n            return true;\n          }\n\n          return false;\n        }) : false;\n        var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n          key: \"header\"\n        }, renderHeader({\n          mode: 'float',\n          layout: layout,\n          insets: {\n            top: top,\n            right: right,\n            bottom: bottom,\n            left: left\n          },\n          scenes: scenes,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          onContentHeightChange: _this2.handleHeaderLayout,\n          gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n          styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n          style: [styles.floating, isFloatHeaderAbsolute && styles.absolute]\n        })) : null;\n        return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n          enabled: isScreensEnabled,\n          style: styles.container,\n          onLayout: _this2.handleLayout\n        }, routes.map(function (route, index, self) {\n          var focused = focusedRoute.key === route.key;\n          var gesture = gestures[route.key];\n          var scene = scenes[index];\n          var isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n\n          var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n              safeAreaInsets = _ref7.safeAreaInsets,\n              _ref7$headerShown = _ref7.headerShown,\n              headerShown = _ref7$headerShown === void 0 ? isParentHeaderShown === false : _ref7$headerShown,\n              headerTransparent = _ref7.headerTransparent,\n              cardShadowEnabled = _ref7.cardShadowEnabled,\n              cardOverlayEnabled = _ref7.cardOverlayEnabled,\n              cardOverlay = _ref7.cardOverlay,\n              cardStyle = _ref7.cardStyle,\n              animationEnabled = _ref7.animationEnabled,\n              gestureResponseDistance = _ref7.gestureResponseDistance,\n              gestureVelocityImpact = _ref7.gestureVelocityImpact,\n              _ref7$gestureDirectio = _ref7.gestureDirection,\n              gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n              _ref7$transitionSpec = _ref7.transitionSpec,\n              transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n              _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n              cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n              _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n              headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n\n          var transitionConfig = {\n            gestureDirection: gestureDirection,\n            transitionSpec: transitionSpec,\n            cardStyleInterpolator: cardStyleInterpolator,\n            headerStyleInterpolator: headerStyleInterpolator\n          };\n\n          if (index !== self.length - 1) {\n            var nextScene = scenes[index + 1];\n\n            if (nextScene) {\n              var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                  _animationEnabled = _ref8.animationEnabled,\n                  _ref8$gestureDirectio = _ref8.gestureDirection,\n                  _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n                  _ref8$transitionSpec = _ref8.transitionSpec,\n                  _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n                  _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n                  _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n                  _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n                  _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n              transitionConfig = {\n                gestureDirection: _gestureDirection,\n                transitionSpec: _transitionSpec,\n                cardStyleInterpolator: _cardStyleInterpolator,\n                headerStyleInterpolator: _headerStyleInterpolator\n              };\n            }\n          }\n\n          var _ref9 = safeAreaInsets || {},\n              _ref9$top = _ref9.top,\n              safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n              _ref9$right = _ref9.right,\n              safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n              _ref9$bottom = _ref9.bottom,\n              safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n              _ref9$left = _ref9.left,\n              safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n\n          var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n          return React.createElement(MaybeScreen, {\n            key: route.key,\n            style: StyleSheet.absoluteFill,\n            enabled: isScreensEnabled,\n            active: isScreenActive,\n            pointerEvents: \"box-none\"\n          }, React.createElement(CardContainer, _extends({\n            index: index,\n            active: index === self.length - 1,\n            focused: focused,\n            closing: closingRouteKeys.includes(route.key),\n            layout: layout,\n            gesture: gesture,\n            scene: scene,\n            safeAreaInsetTop: safeAreaInsetTop,\n            safeAreaInsetRight: safeAreaInsetRight,\n            safeAreaInsetBottom: safeAreaInsetBottom,\n            safeAreaInsetLeft: safeAreaInsetLeft,\n            cardOverlay: cardOverlay,\n            cardOverlayEnabled: cardOverlayEnabled,\n            cardShadowEnabled: cardShadowEnabled,\n            cardStyle: cardStyle,\n            onPageChangeStart: onPageChangeStart,\n            onPageChangeConfirm: onPageChangeConfirm,\n            onPageChangeCancel: onPageChangeCancel,\n            gestureResponseDistance: gestureResponseDistance,\n            headerHeight: headerHeight,\n            onHeaderHeightChange: _this2.handleHeaderLayout,\n            getPreviousScene: _this2.getPreviousScene,\n            getFocusedRoute: _this2.getFocusedRoute,\n            mode: mode,\n            headerMode: headerMode,\n            headerShown: headerShown,\n            hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n            renderHeader: renderHeader,\n            renderScene: renderScene,\n            onOpenRoute: onOpenRoute,\n            onCloseRoute: onCloseRoute,\n            onTransitionStart: onTransitionStart,\n            onTransitionEnd: onTransitionEnd,\n            gestureEnabled: index !== 0 && getGesturesEnabled({\n              route: route\n            }),\n            gestureVelocityImpact: gestureVelocityImpact\n          }, transitionConfig)));\n        })), isFloatHeaderAbsolute ? floatingHeader : null);\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref10 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref10.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","MaybeScreenContainer","MaybeScreen","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","HeaderShownContext","getDistanceForDirection","EPSILON","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","constructor","props","_defineProperty","e","nativeEvent","setState","state","headerHeights","route","previousHeight","index","getPreviousRoute","scenes","previousRoute","previousScene","find","scene","undefined","Dimensions","get","gestures","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","isScreensEnabled","Platform","OS","Consumer","isParentHeaderShown","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","enabled","container","onLayout","handleLayout","map","self","focused","isScreenActive","progress","next","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","animationEnabled","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","active","pointerEvents","closing","includes","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","Animated","Value","openingRouteKeys","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","current","__memo","every","it","i","Component","create","flex","position","zIndex"],"sources":["CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Route,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <HeaderShownContext.Consumer>\n        {(isParentHeaderShown) => {\n          const isFloatHeaderAbsolute =\n            headerMode === 'float'\n              ? this.state.scenes.slice(-2).some((scene) => {\n                  const { descriptor } = scene;\n                  const options = descriptor ? descriptor.options : {};\n                  const {\n                    headerTransparent,\n                    headerShown = isParentHeaderShown === false,\n                  } = options;\n\n                  if (headerTransparent || headerShown === false) {\n                    return true;\n                  }\n\n                  return false;\n                })\n              : false;\n\n          const floatingHeader =\n            headerMode === 'float' ? (\n              <React.Fragment key=\"header\">\n                {renderHeader({\n                  mode: 'float',\n                  layout,\n                  insets: { top, right, bottom, left },\n                  scenes,\n                  getPreviousScene: this.getPreviousScene,\n                  getFocusedRoute: this.getFocusedRoute,\n                  onContentHeightChange: this.handleHeaderLayout,\n                  gestureDirection:\n                    focusedOptions.gestureDirection !== undefined\n                      ? focusedOptions.gestureDirection\n                      : defaultTransitionPreset.gestureDirection,\n                  styleInterpolator:\n                    focusedOptions.headerStyleInterpolator !== undefined\n                      ? focusedOptions.headerStyleInterpolator\n                      : defaultTransitionPreset.headerStyleInterpolator,\n                  style: [\n                    styles.floating,\n                    isFloatHeaderAbsolute && styles.absolute,\n                  ],\n                })}\n              </React.Fragment>\n            ) : null;\n\n          return (\n            <React.Fragment>\n              {isFloatHeaderAbsolute ? null : floatingHeader}\n              <MaybeScreenContainer\n                enabled={isScreensEnabled}\n                style={styles.container}\n                onLayout={this.handleLayout}\n              >\n                {routes.map((route, index, self) => {\n                  const focused = focusedRoute.key === route.key;\n                  const gesture = gestures[route.key];\n                  const scene = scenes[index];\n\n                  const isScreenActive = scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1;\n\n                  const {\n                    safeAreaInsets,\n                    headerShown = isParentHeaderShown === false,\n                    headerTransparent,\n                    cardShadowEnabled,\n                    cardOverlayEnabled,\n                    cardOverlay,\n                    cardStyle,\n                    animationEnabled,\n                    gestureResponseDistance,\n                    gestureVelocityImpact,\n                    gestureDirection = defaultTransitionPreset.gestureDirection,\n                    transitionSpec = defaultTransitionPreset.transitionSpec,\n                    cardStyleInterpolator = animationEnabled === false\n                      ? forNoAnimationCard\n                      : defaultTransitionPreset.cardStyleInterpolator,\n                    headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                  } = scene.descriptor\n                    ? scene.descriptor.options\n                    : ({} as StackNavigationOptions);\n\n                  let transitionConfig = {\n                    gestureDirection,\n                    transitionSpec,\n                    cardStyleInterpolator,\n                    headerStyleInterpolator,\n                  };\n\n                  // When a screen is not the last, it should use next screen's transition config\n                  // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n                  // For example combining a slide and a modal transition would look wrong otherwise\n                  // With this approach, combining different transition styles in the same navigator mostly looks right\n                  // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n                  // but majority of the transitions look alright\n                  if (index !== self.length - 1) {\n                    const nextScene = scenes[index + 1];\n\n                    if (nextScene) {\n                      const {\n                        animationEnabled,\n                        gestureDirection = defaultTransitionPreset.gestureDirection,\n                        transitionSpec = defaultTransitionPreset.transitionSpec,\n                        cardStyleInterpolator = animationEnabled === false\n                          ? forNoAnimationCard\n                          : defaultTransitionPreset.cardStyleInterpolator,\n                        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                      } = nextScene.descriptor\n                        ? nextScene.descriptor.options\n                        : ({} as StackNavigationOptions);\n\n                      transitionConfig = {\n                        gestureDirection,\n                        transitionSpec,\n                        cardStyleInterpolator,\n                        headerStyleInterpolator,\n                      };\n                    }\n                  }\n\n                  const {\n                    top: safeAreaInsetTop = insets.top,\n                    right: safeAreaInsetRight = insets.right,\n                    bottom: safeAreaInsetBottom = insets.bottom,\n                    left: safeAreaInsetLeft = insets.left,\n                  } = safeAreaInsets || {};\n\n                  const headerHeight =\n                    headerMode !== 'none' && headerShown !== false\n                      ? headerHeights[route.key]\n                      : 0;\n\n                  return (\n                    <MaybeScreen\n                      key={route.key}\n                      style={StyleSheet.absoluteFill}\n                      enabled={isScreensEnabled}\n                      active={isScreenActive}\n                      pointerEvents=\"box-none\"\n                    >\n                      <CardContainer\n                        index={index}\n                        active={index === self.length - 1}\n                        focused={focused}\n                        closing={closingRouteKeys.includes(route.key)}\n                        layout={layout}\n                        gesture={gesture}\n                        scene={scene}\n                        safeAreaInsetTop={safeAreaInsetTop}\n                        safeAreaInsetRight={safeAreaInsetRight}\n                        safeAreaInsetBottom={safeAreaInsetBottom}\n                        safeAreaInsetLeft={safeAreaInsetLeft}\n                        cardOverlay={cardOverlay}\n                        cardOverlayEnabled={cardOverlayEnabled}\n                        cardShadowEnabled={cardShadowEnabled}\n                        cardStyle={cardStyle}\n                        onPageChangeStart={onPageChangeStart}\n                        onPageChangeConfirm={onPageChangeConfirm}\n                        onPageChangeCancel={onPageChangeCancel}\n                        gestureResponseDistance={gestureResponseDistance}\n                        headerHeight={headerHeight}\n                        onHeaderHeightChange={this.handleHeaderLayout}\n                        getPreviousScene={this.getPreviousScene}\n                        getFocusedRoute={this.getFocusedRoute}\n                        mode={mode}\n                        headerMode={headerMode}\n                        headerShown={headerShown}\n                        hasAbsoluteHeader={\n                          isFloatHeaderAbsolute && !headerTransparent\n                        }\n                        renderHeader={renderHeader}\n                        renderScene={renderScene}\n                        onOpenRoute={onOpenRoute}\n                        onCloseRoute={onCloseRoute}\n                        onTransitionStart={onTransitionStart}\n                        onTransitionEnd={onTransitionEnd}\n                        gestureEnabled={\n                          index !== 0 && getGesturesEnabled({ route })\n                        }\n                        gestureVelocityImpact={gestureVelocityImpact}\n                        {...transitionConfig}\n                      />\n                    </MaybeScreen>\n                  );\n                })}\n              </MaybeScreenContainer>\n              {isFloatHeaderAbsolute ? floatingHeader : null}\n            </React.Fragment>\n          );\n        }}\n      </HeaderShownContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}