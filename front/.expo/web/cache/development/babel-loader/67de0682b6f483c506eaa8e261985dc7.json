{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport validateScreenOptions from \"./validateScreenOptions\";\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread({}, navigationOptions, {}, configurer(_objectSpread({}, configProps, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread({}, navigationOptions, {}, configurer);\n  }\n\n  return navigationOptions;\n}\n\nexport default (function (routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps, theme) {\n    var state = navigation.state;\n    var route = state;\n    invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = getScreenForRouteName(routeConfigs, route.routeName);\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {},\n      theme: theme\n    };\n    var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    validateScreenOptions(outputConfig, route);\n    return outputConfig;\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP;AAEA,OAAOC,qBAAP;AACA,OAAOC,qBAAP;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,WAApD,EAAiE;AAC/D,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,6BACKC,iBADL,MAEKD,UAAU,mBACRE,WADQ;AAEXD;AAFW,OAFf;AAOD;;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,6BACKC,iBADL,MAEKD,UAFL;AAID;;AACD,SAAOC,iBAAP;AACD;;AAED,gBAAe,UAACE,YAAD,EAAeC,qBAAf;AAAA,SAAyC,UACtDC,UADsD,EAEtDC,WAFsD,EAGtDC,KAHsD,EAInD;AACH,QAAQC,KAAR,GAAkBH,UAAlB,CAAQG,KAAR;AACA,QAAMC,KAAK,GAAGD,KAAd;AAEAZ,aAAS,CACPa,KAAK,CAACC,SAAND,IAAmB,OAAOA,KAAK,CAACC,SAAb,KAA2B,QADvC,EAEP,gEAFO,CAATd;AAKA,QAAMe,SAAS,GAAGd,qBAAqB,CAACM,YAAD,EAAeM,KAAK,CAACC,SAArB,CAAvC;AAEA,QAAME,WAAW,GAAGT,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC;AAEA,QAAMG,iBAAiB,GACrBD,WAAW,KAAKD,SAAhBC,GAA4B,IAA5BA,GAAmCA,WAAW,CAACX,iBADjD;AAEA,QAAMa,qBAAqB,GAAGH,SAAS,CAACV,iBAAxC;AAEA,QAAMc,aAAa,GAAG;AAAEV,gBAAF,EAAEA,UAAF;AAAcC,iBAAW,EAAEA,WAAW,IAAI,EAA1C;AAA8CC;AAA9C,KAAtB;AAEA,QAAIS,YAAY,GAAGjB,WAAW,CAACK,qBAAD,EAAwB,EAAxB,EAA4BW,aAA5B,CAA9B;AACAC,gBAAY,GAAGjB,WAAW,CACxBe,qBADwB,EAExBE,YAFwB,EAGxBD,aAHwB,CAA1BC;AAKAA,gBAAY,GAAGjB,WAAW,CAACc,iBAAD,EAAoBG,YAApB,EAAkCD,aAAlC,CAA1BC;AAEAlB,yBAAqB,CAACkB,YAAD,EAAeP,KAAf,CAArBX;AAEA,WAAOkB,YAAP;AAjCF,GAAe;AAAA,CAAf","names":["invariant","getScreenForRouteName","validateScreenOptions","applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","theme","state","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"sources":["createConfigGetter.js"],"sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}