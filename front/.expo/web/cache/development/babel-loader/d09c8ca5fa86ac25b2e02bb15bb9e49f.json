{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from \"./utils/invariant\";\nvar StateUtils = {\n  get: function get(state, key) {\n    return state.routes.find(function (route) {\n      return route.key === key;\n    }) || null;\n  },\n  indexOf: function indexOf(state, key) {\n    return state.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n  },\n  has: function has(state, key) {\n    return !!state.routes.some(function (route) {\n      return route.key === key;\n    });\n  },\n  push: function push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    var routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  pop: function pop(state) {\n    if (state.index <= 0) {\n      return state;\n    }\n\n    var routes = state.routes.slice(0, -1);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  jumpToIndex: function jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread({}, state, {\n      index: index\n    });\n  },\n  jumpTo: function jumpTo(state, key) {\n    var index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n  back: function back(state) {\n    var index = state.index - 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  forward: function forward(state) {\n    var index = state.index + 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  replaceAndPrune: function replaceAndPrune(state, key, route) {\n    var index = StateUtils.indexOf(state, key);\n    var replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread({}, replaced, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n  replaceAt: function replaceAt(state, key, route) {\n    var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var index = StateUtils.indexOf(state, key);\n    var nextIndex = preserveIndex ? state.index : index;\n    var nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n  replaceAtIndex: function replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    var routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread({}, state, {\n      index: index,\n      routes: routes\n    });\n  },\n  reset: function reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    var nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      var compare = function compare(route, ii) {\n        return routes[ii] === route;\n      };\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread({}, state, {\n      index: nextIndex,\n      routes: routes\n    });\n  }\n};\nexport default StateUtils;","map":{"version":3,"sources":["C:/LearnEZ/node_modules/@react-navigation/core/lib/module/StateUtils.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","invariant","StateUtils","get","state","routes","find","route","indexOf","findIndex","has","some","slice","index","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","nextIndex","nextState","reset","Array","isArray","undefined","compare","ii","every"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport invariant from './utils/invariant';\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\n\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    const routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes\n    });\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n\n    const routes = state.routes.slice(0, -1);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes\n    });\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread({}, state, {\n      index\n    });\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread({}, replaced, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread({}, state, {\n      index,\n      routes\n    });\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread({}, state, {\n      index: nextIndex,\n      routes\n    });\n  }\n\n};\nexport default StateUtils;\n//# sourceMappingURL=StateUtils.js.map"]},"metadata":{},"sourceType":"module"}