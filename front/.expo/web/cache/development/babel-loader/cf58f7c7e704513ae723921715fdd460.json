{"ast":null,"code":"import * as Colors from \"./colors\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nvar SHADOW_COLOR = Colors.black;\nvar SHADOW_OPACITY = 0.24;\nexport default function shadow() {\n  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  if (elevation instanceof Animated.Value) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: new Animated.Value(0),\n        height: elevation.interpolate({\n          inputRange: inputRange,\n          outputRange: [0, 0.5, 0.75, 2, 7, 23]\n        })\n      },\n      shadowOpacity: elevation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, SHADOW_OPACITY],\n        extrapolate: 'clamp'\n      }),\n      shadowRadius: elevation.interpolate({\n        inputRange: inputRange,\n        outputRange: [0, 0.75, 1.5, 3, 8, 24]\n      })\n    };\n  } else {\n    if (elevation === 0) {\n      return {};\n    }\n\n    var height, radius;\n\n    switch (elevation) {\n      case 1:\n        height = 0.5;\n        radius = 0.75;\n        break;\n\n      case 2:\n        height = 0.75;\n        radius = 1.5;\n        break;\n\n      default:\n        height = elevation - 1;\n        radius = elevation;\n    }\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: 0,\n        height: height\n      },\n      shadowOpacity: SHADOW_OPACITY,\n      shadowRadius: radius\n    };\n  }\n}","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/styles/shadow.js"],"names":["Colors","SHADOW_COLOR","black","SHADOW_OPACITY","shadow","elevation","Animated","Value","inputRange","shadowColor","shadowOffset","width","height","interpolate","outputRange","shadowOpacity","extrapolate","shadowRadius","radius"],"mappings":"AAAA,OAAO,KAAKA,MAAZ;;AAEA,IAAMC,YAAY,GAAGD,MAAM,CAACE,KAA5B;AACA,IAAMC,cAAc,GAAG,IAAvB;AACA,eAAe,SAASC,MAAT,GAA+B;AAAA,MAAfC,SAAe,uEAAH,CAAG;;AAC5C,MAAIA,SAAS,YAAYC,QAAQ,CAACC,KAAlC,EAAyC;AACvC,QAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB;AACA,WAAO;AACLC,MAAAA,WAAW,EAAER,YADR;AAELS,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE,IAAIL,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CADK;AAEZK,QAAAA,MAAM,EAAEP,SAAS,CAACQ,WAAV,CAAsB;AAC5BL,UAAAA,UAAU,EAAVA,UAD4B;AAE5BM,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB;AAFe,SAAtB;AAFI,OAFT;AASLC,MAAAA,aAAa,EAAEV,SAAS,CAACQ,WAAV,CAAsB;AACnCL,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADuB;AAEnCM,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAIX,cAAJ,CAFsB;AAGnCa,QAAAA,WAAW,EAAE;AAHsB,OAAtB,CATV;AAcLC,MAAAA,YAAY,EAAEZ,SAAS,CAACQ,WAAV,CAAsB;AAClCL,QAAAA,UAAU,EAAVA,UADkC;AAElCM,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB;AAFqB,OAAtB;AAdT,KAAP;AAmBD,GArBD,MAqBO;AACL,QAAIT,SAAS,KAAK,CAAlB,EAAqB;AACnB,aAAO,EAAP;AACD;;AAED,QAAIO,MAAJ,EAAYM,MAAZ;;AAEA,YAAQb,SAAR;AACE,WAAK,CAAL;AACEO,QAAAA,MAAM,GAAG,GAAT;AACAM,QAAAA,MAAM,GAAG,IAAT;AACA;;AAEF,WAAK,CAAL;AACEN,QAAAA,MAAM,GAAG,IAAT;AACAM,QAAAA,MAAM,GAAG,GAAT;AACA;;AAEF;AACEN,QAAAA,MAAM,GAAGP,SAAS,GAAG,CAArB;AACAa,QAAAA,MAAM,GAAGb,SAAT;AAbJ;;AAgBA,WAAO;AACLI,MAAAA,WAAW,EAAER,YADR;AAELS,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE,CADK;AAEZC,QAAAA,MAAM,EAANA;AAFY,OAFT;AAMLG,MAAAA,aAAa,EAAEZ,cANV;AAOLc,MAAAA,YAAY,EAAEC;AAPT,KAAP;AASD;AACF","sourcesContent":["import * as Colors from './colors';\nimport { Animated } from 'react-native';\nconst SHADOW_COLOR = Colors.black;\nconst SHADOW_OPACITY = 0.24;\nexport default function shadow(elevation = 0) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: new Animated.Value(0),\n        height: elevation.interpolate({\n          inputRange,\n          outputRange: [0, 0.5, 0.75, 2, 7, 23]\n        })\n      },\n      shadowOpacity: elevation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, SHADOW_OPACITY],\n        extrapolate: 'clamp'\n      }),\n      shadowRadius: elevation.interpolate({\n        inputRange,\n        outputRange: [0, 0.75, 1.5, 3, 8, 24]\n      })\n    };\n  } else {\n    if (elevation === 0) {\n      return {};\n    }\n\n    let height, radius;\n\n    switch (elevation) {\n      case 1:\n        height = 0.5;\n        radius = 0.75;\n        break;\n\n      case 2:\n        height = 0.75;\n        radius = 1.5;\n        break;\n\n      default:\n        height = elevation - 1;\n        radius = elevation;\n    }\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: 0,\n        height\n      },\n      shadowOpacity: SHADOW_OPACITY,\n      shadowRadius: radius\n    };\n  }\n}\n//# sourceMappingURL=shadow.js.map"]},"metadata":{},"sourceType":"module"}