{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport var ListAccordionGroupContext = React.createContext(null);\n\nvar ListAccordionGroup = function ListAccordionGroup(_ref) {\n  var expandedIdProp = _ref.expandedId,\n      onAccordionPress = _ref.onAccordionPress,\n      children = _ref.children;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedId = _React$useState2[0],\n      setExpandedId = _React$useState2[1];\n\n  var onAccordionPressDefault = function onAccordionPressDefault(newExpandedId) {\n    setExpandedId(function (currentExpandedId) {\n      return currentExpandedId === newExpandedId ? undefined : newExpandedId;\n    });\n  };\n\n  return React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\nexport default ListAccordionGroup;","map":{"version":3,"sources":["C:/LearnEZ/node_modules/react-native-paper/lib/module/components/List/ListAccordionGroup.js"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","expandedIdProp","expandedId","onAccordionPress","children","useState","undefined","setExpandedId","onAccordionPressDefault","newExpandedId","currentExpandedId","createElement","Provider","value","displayName"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,IAAMC,yBAAyB,GAAgBD,KAAK,CAACE,aAAN,CAAoB,IAApB,CAA/C;;AAuCP,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAIrB;AAAA,MAHQC,cAGR,QAHJC,UAGI;AAAA,MAFJC,gBAEI,QAFJA,gBAEI;AAAA,MADJC,QACI,QADJA,QACI;;AACJ,wBAAoCP,KAAK,CAACQ,QAAN,CAAeC,SAAf,CAApC;AAAA;AAAA,MAAOJ,UAAP;AAAA,MAAmBK,aAAnB;;AAEA,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,aAAa,EAAI;AAC/CF,IAAAA,aAAa,CAAC,UAAAG,iBAAiB;AAAA,aAAIA,iBAAiB,KAAKD,aAAtB,GAAsCH,SAAtC,GAAkDG,aAAtD;AAAA,KAAlB,CAAb;AACD,GAFD;;AAIA,SAAoBZ,KAAK,CAACc,aAAN,CAAoBb,yBAAyB,CAACc,QAA9C,EAAwD;AAC1EC,IAAAA,KAAK,EAAE;AACLX,MAAAA,UAAU,EAAED,cAAc,IAAIC,UADzB;AAGLC,MAAAA,gBAAgB,EAAEA,gBAAgB,IAAIK;AAHjC;AADmE,GAAxD,EAMjBJ,QANiB,CAApB;AAOD,CAlBD;;AAoBAJ,kBAAkB,CAACc,WAAnB,GAAiC,qBAAjC;AACA,eAAed,kBAAf","sourcesContent":["import * as React from 'react';\nexport const ListAccordionGroupContext = /*#__PURE__*/React.createContext(null);\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children\n}) => {\n  const [expandedId, setExpandedId] = React.useState(undefined);\n\n  const onAccordionPressDefault = newExpandedId => {\n    setExpandedId(currentExpandedId => currentExpandedId === newExpandedId ? undefined : newExpandedId);\n  };\n\n  return /*#__PURE__*/React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      // component can be controlled or uncontrolled\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\nexport default ListAccordionGroup;\n//# sourceMappingURL=ListAccordionGroup.js.map"]},"metadata":{},"sourceType":"module"}