{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n          height = _ref3.height;\n\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n          _ref6$top = _ref6.top,\n          top = _ref6$top === void 0 ? insets.top : _ref6$top,\n          _ref6$right = _ref6.right,\n          right = _ref6$right === void 0 ? insets.right : _ref6$right,\n          _ref6$bottom = _ref6.bottom,\n          bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n          _ref6$left = _ref6.left,\n          left = _ref6$left === void 0 ? insets.left : _ref6$left;\n\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n            detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (shouldUseActivityState || Platform.OS === 'web') {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref7.safeAreaInsets,\n            _ref7$headerShown = _ref7.headerShown,\n            headerShown = _ref7$headerShown === void 0 ? true : _ref7$headerShown,\n            headerTransparent = _ref7.headerTransparent,\n            cardShadowEnabled = _ref7.cardShadowEnabled,\n            cardOverlayEnabled = _ref7.cardOverlayEnabled,\n            cardOverlay = _ref7.cardOverlay,\n            cardStyle = _ref7.cardStyle,\n            animationEnabled = _ref7.animationEnabled,\n            gestureResponseDistance = _ref7.gestureResponseDistance,\n            gestureVelocityImpact = _ref7.gestureVelocityImpact,\n            _ref7$gestureDirectio = _ref7.gestureDirection,\n            gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n            _ref7$transitionSpec = _ref7.transitionSpec,\n            transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n            _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n            cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n            _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n            headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref8.animationEnabled,\n                _ref8$gestureDirectio = _ref8.gestureDirection,\n                _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n                _ref8$transitionSpec = _ref8.transitionSpec,\n                _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n                _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n                _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n\n        var _ref9 = safeAreaInsets || {},\n            _ref9$top = _ref9.top,\n            safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n            _ref9$right = _ref9.right,\n            safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n            _ref9$bottom = _ref9.bottom,\n            safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n            _ref9$left = _ref9.left,\n            safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref10 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref10.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAWA,SACEC,oBADF,EAEEC,WAFF,EAGEC,sBAHF;AAKA,SAASC,sBAAT;AAEA,OAAOC,aAAP;AACA,SACEC,iBADF,EAEEC,eAFF;AAIA,SAASC,cAAc,IAAIC,oBAA3B;AACA,SAASD,cAAc,IAAIE,kBAA3B;AACA,OAAOC,uBAAP;AAyDA,IAAMC,OAAO,GAAG,IAAhB;AAEA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,gCAAgC,GAAG,CAAzC;AACA,IAAMC,YAAY,GAAG,CAArB;AAEA,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,MAAPD,CAAc;AAAEE,SAAO,EAAE;AAAX,CAAdF,CAA5B;;AAEA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBC,MADuB,EAEvBC,MAFuB,EAGvBC,mBAHuB,EAIvBC,WAJuB,EAKvBC,MALuB,EAMvBC,QANuB,EAOpB;AACH,SAAOL,MAAM,CAACM,MAAPN,CAAsC,UAACO,GAAD,EAAMC,IAAN,EAAe;AAC1D,eAAyBL,WAAW,CAACK,IAAI,CAACC,GAAN,CAAXN,IAAyB,EAAlD;AAAA,4BAAQL,OAAR;AAAA,QAAQA,OAAR,6BAAkB,EAAlB;;AACA,QAAMY,KAAU,GAAGC,UAAU,CAACC,OAAXD,CAAmBb,OAAO,CAACe,WAARf,IAAuB,EAA1Ca,CAAnB;AAEA,QAAMG,MAAM,GACV,OAAOJ,KAAK,CAACI,MAAb,KAAwB,QAAxB,GAAmCJ,KAAK,CAACI,MAAzC,GAAkDT,QAAQ,CAACG,IAAI,CAACC,GAAN,CAD5D;;AAGA,QAAMM,cAAc,mCACfd,MADe,GAEfH,OAAO,CAACiB,cAFO,CAApB;;AAKA,gCAEIjB,OAFJ,CACEkB,qBADF;AAAA,QACEA,qBADF,sCAC0Bd,mBAAmB,GAAG,CAAH,GAAOa,cAAc,CAACE,GADnE;AAIAV,OAAG,CAACC,IAAI,CAACC,GAAN,CAAHF,GACE,OAAOO,MAAP,KAAkB,QAAlB,GACIA,MADJ,GAEI/B,sBAAsB,CAACqB,MAAD,EAASY,qBAAT,CAH5BT;AAKA,WAAOA,GAAP;AArBK,KAsBJ,EAtBIP,CAAP;AARF;;AAiCA,IAAMkB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAC7BC,IAD6B,EAE7Bf,MAF6B,EAG7BgB,UAH6B,EAI1B;AACH,cAII,WAAU,SAAVA,cAAU,WAAVA,sBAAU,CAAEtB,OAAZ,KAAuB,EAJ3B;AAAA,oCACEuB,gBADF;AAAA,MACEA,gBADF,sCACqBF,IAAI,KAAK,OAATA,GACfjC,eAAe,CAACmC,gBADDF,GAEflC,iBAAiB,CAACoC,gBAHxB;;AAMA,SAAO/B,uBAAuB,CAACc,MAAD,EAASiB,gBAAT,CAA9B;AAXF;;AAcA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAC7BH,IAD6B,EAE7BI,OAF6B,EAG7BnB,MAH6B,EAI7BgB,UAJ6B,EAK1B;AACH,MAAMI,QAAQ,GAAGN,sBAAsB,CACrCC,IADqC,EAErC;AAGEM,SAAK,EAAEC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYtB,MAAM,CAACqB,KAAnBC,CAHT;AAIEZ,UAAM,EAAEY,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYtB,MAAM,CAACU,MAAnBY;AAJV,GAFqC,EAQrCN,UARqC,CAAvC;;AAWA,MAAII,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOD,OAAO,CAACK,WAARL,CAAoB;AACzBM,gBAAU,EAAE,CAAC,CAAD,EAAIL,QAAJ,CADa;AAEzBM,iBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFY,KAApBP,CAAP;AAID;;AAED,SAAOA,OAAO,CAACK,WAARL,CAAoB;AACzBM,cAAU,EAAE,CAACL,QAAD,EAAW,CAAX,CADa;AAEzBM,eAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFY,GAApBP,CAAP;AAxBF;;IA8BqBQ,S;;;;;AAoHnBC,qBAAYC,MAAZD,EAA0B;AAAA;;AAAA;;AACxB,8BAAMC,MAAN;;AADwBC,mEAoBFC,WAAD,EAA0B;AAC/C,kCAA0BA,CAAC,CAACC,WAAFD,CAAc/B,MAAxC;AAAA,UAAQU,MAAR,yBAAQA,MAAR;AAAA,UAAgBW,KAAhB,yBAAgBA,KAAhB;AAEA,UAAMrB,MAAM,GAAG;AAAEqB,aAAF,EAAEA,KAAF;AAASX;AAAT,OAAf;;AAEA,YAAKuB,QAAL,CAAc,UAACC,KAAD,EAAQL,KAAR,EAAkB;AAC9B,YAAInB,MAAM,KAAKwB,KAAK,CAAClC,MAANkC,CAAaxB,MAAxBA,IAAkCW,KAAK,KAAKa,KAAK,CAAClC,MAANkC,CAAab,KAA7D,EAAoE;AAClE,iBAAO,IAAP;AACD;;AAED,eAAO;AACLrB,gBADK,EACLA,MADK;AAELmC,uBAAa,EAAExC,gBAAgB,CAC7BkC,KAAK,CAACjC,MADuB,EAE7BiC,KAAK,CAAChC,MAFuB,EAG7BgC,KAAK,CAAC/B,mBAHuB,EAI7BoC,KAAK,CAACnC,WAJuB,EAK7BC,MAL6B,EAM7BkC,KAAK,CAACC,aANuB;AAF1B,SAAP;AALF;AAzBwB;;AAAAL,yEA4CG,iBAMvB;AAAA,UALJM,KAKI,SALJA,KAKI;AAAA,UAJJ1B,MAII,SAJJA,MAII;;AACJ,YAAKuB,QAAL,CAAc,iBAAuB;AAAA,YAApBE,aAAoB,SAApBA,aAAoB;AACnC,YAAME,cAAc,GAAGF,aAAa,CAACC,KAAK,CAAC/B,GAAP,CAApC;;AAEA,YAAIgC,cAAc,KAAK3B,MAAvB,EAA+B;AAC7B,iBAAO,IAAP;AACD;;AAED,eAAO;AACLyB,uBAAa,kCACRA,aADQ,4BAEVC,KAAK,CAAC/B,GAFI,EAEEK,MAFF;AADR,SAAP;AAPF;AAnDwB;;AAAAoB,sEAmEA,YAAM;AAC9B,UAAQI,KAAR,GAAkB,MAAKL,KAAvB,CAAQK,KAAR;AAEA,aAAOA,KAAK,CAACtC,MAANsC,CAAaA,KAAK,CAACI,KAAnBJ,CAAP;AAtEwB;;AAAAJ,uEAyEC,iBAAyC;AAAA,UAAtCM,KAAsC,SAAtCA,KAAsC;AAClE,UAAQG,gBAAR,GAA6B,MAAKV,KAAlC,CAAQU,gBAAR;AACA,UAAQC,MAAR,GAAmB,MAAKN,KAAxB,CAAQM,MAAR;AAEA,UAAMC,aAAa,GAAGF,gBAAgB,CAAC;AAAEH;AAAF,OAAD,CAAtC;;AAEA,UAAIK,aAAJ,EAAmB;AACjB,YAAMC,aAAa,GAAGF,MAAM,CAACG,IAAPH,CACnBI,eAAD;AAAA,iBAAWA,KAAK,CAACR,KAANQ,CAAYvC,GAAZuC,KAAoBH,aAAa,CAACpC,GAA7C;AAAA,SADoBmC,CAAtB;AAIA,eAAOE,aAAP;AACD;;AAED,aAAOG,SAAP;AAvFwB;;AAGxB,0BAAkCC,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAlC;AAAA,gDAAQpC,MAAR;AAAA,QAAQA,OAAR,sCAAiB,CAAjB;AAAA,gDAAoBW,KAApB;AAAA,QAAoBA,MAApB,sCAA4B,CAA5B;;AAEA,UAAKa,KAAL,GAAa;AACXtC,YAAM,EAAE,EADG;AAEX4C,YAAM,EAAE,EAFG;AAGXQ,cAAQ,EAAE,EAHC;AAIXhD,YAAM,EAAE;AAAEU,cAAM,EAANA,OAAF;AAAUW,aAAK,EAALA;AAAV,OAJG;AAKXtB,iBAAW,EAAE,MAAK8B,KAAL,CAAW9B,WALb;AAWXoC,mBAAa,EAAE;AAXJ,KAAb;AALwB;AAkBzB;;;;WAwEDc,kBAAS;AAAA;;AACP,wBAyBI,KAAKpB,KAzBT;AAAA,UACEd,IADF,eACEA,IADF;AAAA,UAEElB,MAFF,eAEEA,MAFF;AAAA,UAGEE,WAHF,eAGEA,WAHF;AAAA,UAIEmC,KAJF,eAIEA,KAJF;AAAA,UAKEtC,MALF,eAKEA,MALF;AAAA,UAMEsD,gBANF,eAMEA,gBANF;AAAA,UAOEC,WAPF,eAOEA,WAPF;AAAA,UAQEC,YARF,eAQEA,YARF;AAAA,UASEC,kBATF,eASEA,kBATF;AAAA,UAUEC,YAVF,eAUEA,YAVF;AAAA,UAWEC,WAXF,eAWEA,WAXF;AAAA,UAYEC,UAZF,eAYEA,UAZF;AAAA,UAaE1D,mBAbF,eAaEA,mBAbF;AAAA,UAcE2D,iBAdF,eAcEA,iBAdF;AAAA,UAeEC,eAfF,eAeEA,eAfF;AAAA,UAgBEC,iBAhBF,eAgBEA,iBAhBF;AAAA,UAiBEC,mBAjBF,eAiBEA,mBAjBF;AAAA,UAkBEC,kBAlBF,eAkBEA,kBAlBF;AAAA,UAmBEC,cAnBF,eAmBEA,cAnBF;AAAA,UAoBEC,YApBF,eAoBEA,YApBF;AAAA,UAqBEC,eArBF,eAqBEA,eArBF;AAAA,8CAwBEC,qBAxBF;AAAA,UAwBEA,qBAxBF,sCAwB0BC,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyBxF,sBAxBnD;AA2BA,wBAAoD,KAAKwD,KAAzD;AAAA,UAAQM,MAAR,eAAQA,MAAR;AAAA,UAAgBxC,MAAhB,eAAgBA,MAAhB;AAAA,UAAwBgD,QAAxB,eAAwBA,QAAxB;AAAA,UAAkCb,aAAlC,eAAkCA,aAAlC;AAEA,UAAMiC,YAAY,GAAGlC,KAAK,CAACtC,MAANsC,CAAaA,KAAK,CAACI,KAAnBJ,CAArB;AACA,UAAMmC,iBAAiB,GAAGtE,WAAW,CAACqE,YAAY,CAAC/D,GAAd,CAArC;AACA,UAAMiE,cAAc,GAAGD,iBAAiB,GAAGA,iBAAiB,CAAC3E,OAArB,GAA+B,EAAvE;AACA,UAAM6E,mBAAmB,GAAGpC,aAAa,CAACiC,YAAY,CAAC/D,GAAd,CAAzC;AAEA,UAAImE,uBAAuB,GACzBzD,IAAI,KAAK,OAATA,GAAmBjC,eAAnBiC,GAAqClC,iBADvC;;AAGA,UAAI2E,UAAU,KAAK,QAAnB,EAA6B;AAC3BgB,+BAAuB,mCAClBA,uBADkB;AAErBC,iCAAuB,EAAEzF;AAFJ,UAAvBwF;AAID;;AAED,kBAKIF,cAAc,CAAC3D,cAAf2D,IAAiC,EALrC;AAAA,4BACEzD,GADF;AAAA,UACEA,GADF,0BACQhB,MAAM,CAACgB,GADf;AAAA,8BAEE6D,KAFF;AAAA,UAEEA,KAFF,4BAEU7E,MAAM,CAAC6E,KAFjB;AAAA,+BAGEC,MAHF;AAAA,UAGEA,MAHF,6BAGW9E,MAAM,CAAC8E,MAHlB;AAAA,6BAIEC,IAJF;AAAA,UAIEA,IAJF,2BAIS/E,MAAM,CAAC+E,IAJhB;;AAOA,UAAIC,kBAAkB,GAAG,CAAzB;;AAEA,WAAK,IAAIC,CAAC,GAAGtC,MAAM,CAACuC,MAAPvC,GAAgB,CAA7B,EAAgCsC,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,oCAKItC,MAAM,CAACsC,CAAD,CAANtC,CAAUxB,UAAVwB,CAAqB9C,OALzB,CAEEsF,oBAFF;AAAA,YAEEA,oBAFF,sCAEyBjE,IAAI,KAAK,OAATA,GACnB+D,CAAC,KAAKtC,MAAM,CAACuC,MAAPvC,GAAgB,CADHzB,GAEnB,IAJN;;AAOA,YAAIiE,oBAAoB,KAAK,KAA7B,EAAoC;AAClCH,4BAAkB;AADpB,eAEO;AACL;AACD;AACF;;AAED,UAAMI,qBAAqB,GACzBzB,UAAU,KAAK,OAAfA,GACI,KAAKtB,KAAL,CAAWM,MAAX,CAAkB0C,KAAlB,CAAwB,CAAC,CAAzB,EAA4BC,IAA5B,CAAkCvC,eAAD,EAAW;AAC1C,YAAQ5B,UAAR,GAAuB4B,KAAvB,CAAQ5B,UAAR;AACA,YAAMtB,OAAO,GAAGsB,UAAU,GAAGA,UAAU,CAACtB,OAAd,GAAwB,EAAlD;AACA,YAAQ0F,iBAAR,GAAkD1F,OAAlD,CAAQ0F,iBAAR;AAAA,mCAAkD1F,OAAlD,CAA2B2F,WAA3B;AAAA,YAA2BA,WAA3B,qCAAyC,IAAzC;;AAEA,YAAID,iBAAiB,IAAIC,WAAW,KAAK,KAAzC,EAAgD;AAC9C,iBAAO,IAAP;AACD;;AAED,eAAO,KAAP;AATF,QADJ7B,GAYI,KAbN;AAeA,UAAM8B,cAAc,GAClB9B,UAAU,KAAK,OAAfA,GACEjF,oBAACA,KAAD,CAAOgH,QAAP;AAAgBlF,WAAG,EAAC;AAApB,SACGiD,YAAY,CAAC;AACZvC,YAAI,EAAE,OADM;AAEZf,cAFY,EAEZA,MAFY;AAGZH,cAAM,EAAE;AAAEgB,aAAF,EAAEA,GAAF;AAAO6D,eAAP,EAAOA,KAAP;AAAcC,gBAAd,EAAcA,MAAd;AAAsBC;AAAtB,SAHI;AAIZpC,cAJY,EAIZA,MAJY;AAKZgD,wBAAgB,EAAE,KAAKA,gBALX;AAMZC,uBAAe,EAAE,KAAKA,eANV;AAOZC,6BAAqB,EAAE,KAAKC,kBAPhB;AAQZ1E,wBAAgB,EACdqD,cAAc,CAACrD,gBAAfqD,KAAoCzB,SAApCyB,GACIA,cAAc,CAACrD,gBADnBqD,GAEIE,uBAAuB,CAACvD,gBAXlB;AAYZ2E,yBAAiB,EACftB,cAAc,CAACG,uBAAfH,KAA2CzB,SAA3CyB,GACIA,cAAc,CAACG,uBADnBH,GAEIE,uBAAuB,CAACC,uBAflB;AAgBZnE,aAAK,EAAE,CACLuF,MAAM,CAACC,QADF,EAELb,qBAAqB,IAAI,CAEvB;AAAEvE,gBAAM,EAAE6D;AAAV,SAFuB,EAGvBsB,MAAM,CAACE,QAHgB,CAFpB;AAhBK,OAAD,CADf,CADFvC,GA4BI,IA7BN;AA+BA,aACEjF,oBAACA,KAAD,CAAOgH,QAAP,QACGN,qBAAqB,GAAG,IAAH,GAAUK,cADlC,EAEE/G,oBAACC,oBAAD;AACEwH,eAAO,EAAE/B,qBADX;AAEE3D,aAAK,EAAEuF,MAAM,CAACI,SAFhB;AAGEC,gBAAQ,EAAE,KAAKC;AAHjB,SAKGvG,MAAM,CAACwG,GAAPxG,CAAW,UAACwC,KAAD,EAAQE,KAAR,EAAe+D,IAAf,EAAwB;AAClC,YAAMC,OAAO,GAAGlC,YAAY,CAAC/D,GAAb+D,KAAqBhC,KAAK,CAAC/B,GAA3C;AACA,YAAMc,OAAO,GAAG6B,QAAQ,CAACZ,KAAK,CAAC/B,GAAP,CAAxB;AACA,YAAMuC,KAAK,GAAGJ,MAAM,CAACF,KAAD,CAApB;AAMA,YAAIiE,cAA0D,GAAG,CAAjE;;AAEA,YAAI7H,sBAAsB,IAAIwF,QAAQ,CAACC,EAATD,KAAgB,KAA9C,EAAqD;AACnD,cAAI5B,KAAK,GAAG+D,IAAI,CAACtB,MAALsB,GAAcxB,kBAAdwB,GAAmC,CAA/C,EAAkD;AAEhDE,0BAAc,GAAGnH,cAAjBmH;AAFF,iBAGO;AACL,gBAAMC,gBAAgB,GAAGhE,MAAM,CAAC6D,IAAI,CAACtB,MAALsB,GAAc,CAAf,CAA/B;AACA,gBAAMI,WAAW,GACfnE,KAAK,KAAK+D,IAAI,CAACtB,MAALsB,GAAc,CAAxB/D,GACIhD,YADJgD,GAEIA,KAAK,IAAI+D,IAAI,CAACtB,MAALsB,GAAcxB,kBAAvBvC,GACAjD,gCADAiD,GAEAlD,cALN;AAMAmH,0BAAc,GAAGC,gBAAgB,GAC7BA,gBAAgB,CAACE,QAAjBF,CAA0BG,OAA1BH,CAAkChF,WAAlCgF,CAA8C;AAC5C/E,wBAAU,EAAE,CAAC,CAAD,EAAI,IAAItC,OAAR,EAAiB,CAAjB,CADgC;AAE5CuC,yBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO+E,WAAP,CAF+B;AAG5CG,yBAAW,EAAE;AAH+B,aAA9CJ,CAD6B,GAM7BnH,gCANJkH;AAOD;AAnBH,eAoBO;AACLA,wBAAc,GAAG3D,KAAK,CAAC8D,QAAN9D,CAAeiE,IAAfjE,GACbA,KAAK,CAAC8D,QAAN9D,CAAeiE,IAAfjE,CAAoBpB,WAApBoB,CAAgC;AAC9BnB,sBAAU,EAAE,CAAC,CAAD,EAAI,IAAItC,OAAR,EAAiB,CAAjB,CADkB;AAE9BuC,uBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFiB;AAG9BkF,uBAAW,EAAE;AAHiB,WAAhChE,CADaA,GAMb,CANJ2D;AAOD;;AAED,oBAiBI3D,KAAK,CAAC5B,UAAN4B,GACAA,KAAK,CAAC5B,UAAN4B,CAAiBlD,OADjBkD,GAEC,EAnBL;AAAA,YACEjC,cADF,SACEA,cADF;AAAA,sCAEE0E,WAFF;AAAA,YAEEA,WAFF,kCAEgB,IAFhB;AAAA,YAGED,iBAHF,SAGEA,iBAHF;AAAA,YAIE0B,iBAJF,SAIEA,iBAJF;AAAA,YAKEC,kBALF,SAKEA,kBALF;AAAA,YAMEC,WANF,SAMEA,WANF;AAAA,YAOEC,SAPF,SAOEA,SAPF;AAAA,YAQEC,gBARF,SAQEA,gBARF;AAAA,YASEC,uBATF,SASEA,uBATF;AAAA,YAUEC,qBAVF,SAUEA,qBAVF;AAAA,0CAWEnG,gBAXF;AAAA,YAWEA,gBAXF,sCAWqBuD,uBAAuB,CAACvD,gBAX7C;AAAA,yCAYEoG,cAZF;AAAA,YAYEA,cAZF,qCAYmB7C,uBAAuB,CAAC6C,cAZ3C;AAAA,0CAaEC,qBAbF;AAAA,YAaEA,qBAbF,sCAa0BJ,gBAAgB,KAAK,KAArBA,GACpBjI,kBADoBiI,GAEpB1C,uBAAuB,CAAC8C,qBAf9B;AAAA,0CAgBE7C,uBAhBF;AAAA,YAgBEA,uBAhBF,sCAgB4BD,uBAAuB,CAACC,uBAhBpD;;AAqBA,YAAI8C,gBAAgB,GAAG;AACrBtG,0BADqB,EACrBA,gBADqB;AAErBoG,wBAFqB,EAErBA,cAFqB;AAGrBC,+BAHqB,EAGrBA,qBAHqB;AAIrB7C;AAJqB,SAAvB;;AAaA,YAAInC,KAAK,KAAK+D,IAAI,CAACtB,MAALsB,GAAc,CAA5B,EAA+B;AAC7B,cAAMmB,SAAS,GAAGhF,MAAM,CAACF,KAAK,GAAG,CAAT,CAAxB;;AAEA,cAAIkF,SAAJ,EAAe;AACb,wBAQIA,SAAS,CAACxG,UAAVwG,GACAA,SAAS,CAACxG,UAAVwG,CAAqB9H,OADrB8H,GAEC,EAVL;AAAA,gBACEN,iBADF,SACEA,gBADF;AAAA,8CAEEjG,gBAFF;AAAA,gBAEEA,iBAFF,sCAEqBuD,uBAAuB,CAACvD,gBAF7C;AAAA,6CAGEoG,cAHF;AAAA,gBAGEA,eAHF,qCAGmB7C,uBAAuB,CAAC6C,cAH3C;AAAA,8CAIEC,qBAJF;AAAA,gBAIEA,sBAJF,sCAI0BJ,iBAAgB,KAAK,KAArBA,GACpBjI,kBADoBiI,GAEpB1C,uBAAuB,CAAC8C,qBAN9B;AAAA,8CAOE7C,uBAPF;AAAA,gBAOEA,wBAPF,sCAO4BD,uBAAuB,CAACC,uBAPpD;;AAYA8C,4BAAgB,GAAG;AACjBtG,8BADiB,EACjBA,iBADiB;AAEjBoG,4BAFiB,EAEjBA,eAFiB;AAGjBC,mCAHiB,EAGjBA,sBAHiB;AAIjB7C;AAJiB,aAAnB8C;AAMD;AACF;;AAED,oBAKI5G,cAAc,IAAI,EALtB;AAAA,8BACEE,GADF;AAAA,YACO4G,gBADP,0BAC0B5H,MAAM,CAACgB,GADjC;AAAA,gCAEE6D,KAFF;AAAA,YAESgD,kBAFT,4BAE8B7H,MAAM,CAAC6E,KAFrC;AAAA,iCAGEC,MAHF;AAAA,YAGUgD,mBAHV,6BAGgC9H,MAAM,CAAC8E,MAHvC;AAAA,+BAIEC,IAJF;AAAA,YAIQgD,iBAJR,2BAI4B/H,MAAM,CAAC+E,IAJnC;;AAOA,YAAMiD,YAAY,GAChBrE,UAAU,KAAK,MAAfA,IAAyB6B,WAAW,KAAK,KAAzC7B,GACIrB,aAAa,CAACC,KAAK,CAAC/B,GAAP,CADjBmD,GAEI,CAHN;AAKA,eACEjF,oBAACE,WAAD;AACE4B,aAAG,EAAE+B,KAAK,CAAC/B,GADb;AAEEC,eAAK,EAAEC,UAAU,CAACuH,YAFpB;AAGE9B,iBAAO,EAAE/B,qBAHX;AAIE8D,gBAAM,EAAExB,cAJV;AAKEyB,uBAAa,EAAC;AALhB,WAOEzJ,oBAACK,aAAD;AACE0D,eAAK,EAAEA,KADT;AAEEyF,gBAAM,EAAEzF,KAAK,KAAK+D,IAAI,CAACtB,MAALsB,GAAc,CAFlC;AAGEC,iBAAO,EAAEA,OAHX;AAIE2B,iBAAO,EAAE/E,gBAAgB,CAACgF,QAAjBhF,CAA0Bd,KAAK,CAAC/B,GAAhC6C,CAJX;AAKElD,gBAAM,EAAEA,MALV;AAMEmB,iBAAO,EAAEA,OANX;AAOEyB,eAAK,EAAEA,KAPT;AAQE6E,0BAAgB,EAAEA,gBARpB;AASEC,4BAAkB,EAAEA,kBATtB;AAUEC,6BAAmB,EAAEA,mBAVvB;AAWEC,2BAAiB,EAAEA,iBAXrB;AAYEZ,qBAAW,EAAEA,WAZf;AAaED,4BAAkB,EAAEA,kBAbtB;AAcED,2BAAiB,EAAEA,iBAdrB;AAeEG,mBAAS,EAAEA,SAfb;AAgBEtD,2BAAiB,EAAEA,iBAhBrB;AAiBEC,6BAAmB,EAAEA,mBAjBvB;AAkBEC,4BAAkB,EAAEA,kBAlBtB;AAmBEC,wBAAc,EAAEA,cAnBlB;AAoBEE,yBAAe,EAAEA,eApBnB;AAqBED,sBAAY,EAAEA,YArBhB;AAsBEoD,iCAAuB,EAAEA,uBAtB3B;AAuBEU,sBAAY,EAAEA,YAvBhB;AAwBE/H,6BAAmB,EAAEA,mBAxBvB;AAyBEqI,8BAAoB,EAAE,OAAKxC,kBAzB7B;AA0BEH,0BAAgB,EAAE,OAAKA,gBA1BzB;AA2BEC,yBAAe,EAAE,OAAKA,eA3BxB;AA4BE1E,cAAI,EAAEA,IA5BR;AA6BEyC,oBAAU,EAAEA,UA7Bd;AA8BE6B,qBAAW,EAAEA,WA9Bf;AA+BE+C,2BAAiB,EACfnD,qBAAqB,IAAI,CAACG,iBAhC9B;AAkCE9B,sBAAY,EAAEA,YAlChB;AAmCEC,qBAAW,EAAEA,WAnCf;AAoCEJ,qBAAW,EAAEA,WApCf;AAqCEC,sBAAY,EAAEA,YArChB;AAsCEK,2BAAiB,EAAEA,iBAtCrB;AAuCEC,yBAAe,EAAEA,eAvCnB;AAwCE2E,wBAAc,EAAE/F,KAAK,KAAK,CAAVA,IAAee,kBAAkB,CAAC;AAAEjB;AAAF,WAAD,CAxCnD;AAyCEgF,+BAAqB,EAAEA;AAzCzB,WA0CMG,gBA1CN,EAPF,CADF;AAhHD,QALH,CAFF,EA+KGtC,qBAAqB,GAAGK,cAAH,GAAoB,IA/K5C,CADF;AAmLD;;;WAnfD,kCAAgCzD,KAAhC,EAA8CK,KAA9C,EAA4D;AAC1D,UACEL,KAAK,CAACjC,MAANiC,KAAiBK,KAAK,CAACtC,MAAvBiC,IACAA,KAAK,CAAC9B,WAAN8B,KAAsBK,KAAK,CAACnC,WAF9B,EAGE;AACA,eAAO,IAAP;AACD;;AAED,UAAMiD,QAAQ,GAAGnB,KAAK,CAACjC,MAANiC,CAAa3B,MAAb2B,CAAmC,UAAC1B,GAAD,EAAMC,IAAN,EAAe;AACjE,YAAMY,UAAU,GAAGa,KAAK,CAAC9B,WAAN8B,CAAkBzB,IAAI,CAACC,GAAvBwB,CAAnB;;AACA,qBAA6B,WAAU,SAAVb,cAAU,WAAVA,sBAAU,CAAEtB,OAAZ,KAAuB,EAApD;AAAA,YAAQwH,gBAAR,UAAQA,gBAAR;;AAEA/G,WAAG,CAACC,IAAI,CAACC,GAAN,CAAHF,GACE+B,KAAK,CAACc,QAANd,CAAe9B,IAAI,CAACC,GAApB6B,KACA,IAAIoG,QAAQ,CAACC,KAAb,CACE1G,KAAK,CAAC2G,gBAAN3G,CAAuBqG,QAAvBrG,CAAgCzB,IAAI,CAACC,GAArCwB,KACAqF,gBAAgB,KAAK,KADrBrF,GAEIf,sBAAsB,CAACe,KAAK,CAACd,IAAP,EAAamB,KAAK,CAAClC,MAAnB,EAA2BgB,UAA3B,CAF1Ba,GAGI,CAJN,CAFF1B;AASA,eAAOA,GAAP;AAbe,SAcd,EAdc0B,CAAjB;AAgBA,aAAO;AACLjC,cAAM,EAAEiC,KAAK,CAACjC,MADT;AAEL4C,cAAM,EAAEX,KAAK,CAACjC,MAANiC,CAAauE,GAAbvE,CAAiB,UAACO,KAAD,EAAQE,KAAR,EAAe+D,IAAf,EAAwB;AAC/C,cAAM5D,aAAa,GAAG4D,IAAI,CAAC/D,KAAK,GAAG,CAAT,CAA1B;AACA,cAAMmG,SAAS,GAAGpC,IAAI,CAAC/D,KAAK,GAAG,CAAT,CAAtB;AAEA,cAAMoG,QAAQ,GAAGxG,KAAK,CAACM,MAANN,CAAaI,KAAbJ,CAAjB;AAEA,cAAMyG,cAAc,GAAG3F,QAAQ,CAACZ,KAAK,CAAC/B,GAAP,CAA/B;AACA,cAAMuI,eAAe,GAAGnG,aAAa,GACjCO,QAAQ,CAACP,aAAa,CAACpC,GAAf,CADyB,GAEjCwC,SAFJ;AAGA,cAAMgG,WAAW,GAAGJ,SAAS,GAAGzF,QAAQ,CAACyF,SAAS,CAACpI,GAAX,CAAX,GAA6BwC,SAA1D;AAEA,cAAM7B,UAAU,GACda,KAAK,CAAC9B,WAAN8B,CAAkBO,KAAK,CAAC/B,GAAxBwB,KACAK,KAAK,CAACnC,WAANmC,CAAkBE,KAAK,CAAC/B,GAAxB6B,CADAL,KAEC6G,QAAQ,GAAGA,QAAQ,CAAC1H,UAAZ,GAAyBzB,mBAFlCsC,CADF;AAKA,cAAMiH,cAAc,GAClBjH,KAAK,CAAC9B,WAAN8B,CAAkB4G,SAAlB,SAAkBA,aAAlB,WAAkBA,GAAlB,MAAkBA,YAAS,CAAEpI,GAA7BwB,KACAK,KAAK,CAACnC,WAANmC,CAAkBuG,SAAlB,SAAkBA,aAAlB,WAAkBA,GAAlB,MAAkBA,YAAS,CAAEpI,GAA7B6B,CAFF;AAIA,cAAM6G,kBAAkB,GACtBlH,KAAK,CAAC9B,WAAN8B,CAAkBY,aAAlB,SAAkBA,iBAAlB,WAAkBA,GAAlB,MAAkBA,gBAAa,CAAEpC,GAAjCwB,KACAK,KAAK,CAACnC,WAANmC,CAAkBO,aAAlB,SAAkBA,iBAAlB,WAAkBA,GAAlB,MAAkBA,gBAAa,CAAEpC,GAAjC6B,CAFF;AAIA,cAAMU,KAAK,GAAG;AACZR,iBADY,EACZA,KADY;AAEZpB,sBAFY,EAEZA,UAFY;AAGZ0F,oBAAQ,EAAE;AACRC,qBAAO,EAAEzF,sBAAsB,CAC7BW,KAAK,CAACd,IADuB,EAE7B4H,cAF6B,EAG7BzG,KAAK,CAAClC,MAHuB,EAI7BgB,UAJ6B,CADvB;AAOR6F,kBAAI,EAAEgC,WAAW,GACb3H,sBAAsB,CACpBW,KAAK,CAACd,IADc,EAEpB8H,WAFoB,EAGpB3G,KAAK,CAAClC,MAHc,EAIpB8I,cAJoB,CADT,GAObjG,SAdI;AAeR5C,sBAAQ,EAAE2I,eAAe,GACrB1H,sBAAsB,CACpBW,KAAK,CAACd,IADc,EAEpB6H,eAFoB,EAGpB1G,KAAK,CAAClC,MAHc,EAIpB+I,kBAJoB,CADD,GAOrBlG;AAtBI,aAHE;AA2BZmG,kBAAM,EAAE,CACN5G,KADM,EAENF,KAAK,CAAClC,MAFA,EAGNgB,UAHM,EAIN8H,cAJM,EAKNC,kBALM,EAMNJ,cANM,EAONE,WAPM,EAQND,eARM;AA3BI,WAAd;;AAuCA,cACEF,QAAQ,IACR9F,KAAK,CAACoG,MAANpG,CAAaqG,KAAbrG,CAAmB,UAACsG,EAAD,EAAKpE,CAAL,EAAW;AAE5B,mBAAO4D,QAAQ,CAACM,MAATN,CAAgB5D,CAAhB4D,MAAuBQ,EAA9B;AAFF,YAFF,EAME;AACA,mBAAOR,QAAP;AACD;;AAED,iBAAO9F,KAAP;AA1EM,UAFH;AA8ELI,gBA9EK,EA8ELA,QA9EK;AA+ELjD,mBAAW,EAAE8B,KAAK,CAAC9B,WA/Ed;AAgFLoC,qBAAa,EAAExC,gBAAgB,CAC7BkC,KAAK,CAACjC,MADuB,EAE7BiC,KAAK,CAAChC,MAFuB,EAG7BgC,KAAK,CAAC/B,mBAHuB,EAI7BoC,KAAK,CAACnC,WAJuB,EAK7BmC,KAAK,CAAClC,MALuB,EAM7BkC,KAAK,CAACC,aANuB;AAhF1B,OAAP;AAyFD;;;;EAlHoC5D,KAAK,CAAC4K,S;;SAAxBxH,S;AAufrB,IAAMkE,MAAM,GAAGtF,UAAU,CAAC6I,MAAX7I,CAAkB;AAC/B0F,WAAS,EAAE;AACToD,QAAI,EAAE;AADG,GADoB;AAI/BtD,UAAQ,EAAE;AACRuD,YAAQ,EAAE,UADF;AAERzI,OAAG,EAAE,CAFG;AAGR+D,QAAI,EAAE,CAHE;AAIRF,SAAK,EAAE;AAJC,GAJqB;AAU/BoB,UAAQ,EAAE;AACRyD,UAAM,EAAE;AADA;AAVqB,CAAlBhJ,CAAf","names":["React","MaybeScreenContainer","MaybeScreen","shouldUseActivityState","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","constructor","props","_defineProperty","e","nativeEvent","setState","state","headerHeights","route","previousHeight","index","getPreviousRoute","scenes","previousRoute","previousScene","find","scene","undefined","Dimensions","get","gestures","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","OS","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","activeScreensLimit","i","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","enabled","container","onLayout","handleLayout","map","self","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","next","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","animationEnabled","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","active","pointerEvents","closing","includes","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","Animated","Value","openingRouteKeys","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","__memo","every","it","Component","create","flex","position","zIndex"],"sources":["CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Route,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}